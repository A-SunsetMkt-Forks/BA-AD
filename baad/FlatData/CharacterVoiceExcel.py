# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterVoiceExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterVoiceExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterVoiceExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterVoiceExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterVoiceExcel
    def CharacterVoiceUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def CharacterVoiceGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def VoiceHash(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def OnlyOne(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterVoiceExcel
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterVoiceExcel
    def CVCollectionType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def UnlockFavorRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterVoiceExcel
    def LocalizeCVGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterVoiceExcel
    def Nation_(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def Nation_AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterVoiceExcel
    def Nation_Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def Nation_IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterVoiceExcel
    def Volume(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def VolumeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CharacterVoiceExcel
    def VolumeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def VolumeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # CharacterVoiceExcel
    def Delay(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterVoiceExcel
    def DelayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CharacterVoiceExcel
    def DelayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def DelayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # CharacterVoiceExcel
    def Path(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CharacterVoiceExcel
    def PathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterVoiceExcel
    def PathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def Start(builder): builder.StartObject(14)
def CharacterVoiceExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId): builder.PrependInt64Slot(0, CharacterVoiceUniqueId, 0)
def CharacterVoiceExcelAddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId):
    """This method is deprecated. Please switch to AddCharacterVoiceUniqueId."""
    return AddCharacterVoiceUniqueId(builder, CharacterVoiceUniqueId)
def AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId): builder.PrependInt64Slot(1, CharacterVoiceGroupId, 0)
def CharacterVoiceExcelAddCharacterVoiceGroupId(builder, CharacterVoiceGroupId):
    """This method is deprecated. Please switch to AddCharacterVoiceGroupId."""
    return AddCharacterVoiceGroupId(builder, CharacterVoiceGroupId)
def AddVoiceHash(builder, VoiceHash): builder.PrependUint32Slot(2, VoiceHash, 0)
def CharacterVoiceExcelAddVoiceHash(builder, VoiceHash):
    """This method is deprecated. Please switch to AddVoiceHash."""
    return AddVoiceHash(builder, VoiceHash)
def AddOnlyOne(builder, OnlyOne): builder.PrependBoolSlot(3, OnlyOne, 0)
def CharacterVoiceExcelAddOnlyOne(builder, OnlyOne):
    """This method is deprecated. Please switch to AddOnlyOne."""
    return AddOnlyOne(builder, OnlyOne)
def AddPriority(builder, Priority): builder.PrependInt32Slot(4, Priority, 0)
def CharacterVoiceExcelAddPriority(builder, Priority):
    """This method is deprecated. Please switch to AddPriority."""
    return AddPriority(builder, Priority)
def AddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(5, DisplayOrder, 0)
def CharacterVoiceExcelAddDisplayOrder(builder, DisplayOrder):
    """This method is deprecated. Please switch to AddDisplayOrder."""
    return AddDisplayOrder(builder, DisplayOrder)
def AddCollectionVisible(builder, CollectionVisible): builder.PrependBoolSlot(6, CollectionVisible, 0)
def CharacterVoiceExcelAddCollectionVisible(builder, CollectionVisible):
    """This method is deprecated. Please switch to AddCollectionVisible."""
    return AddCollectionVisible(builder, CollectionVisible)
def AddCVCollectionType_(builder, CVCollectionType_): builder.PrependInt32Slot(7, CVCollectionType_, 0)
def CharacterVoiceExcelAddCVCollectionType_(builder, CVCollectionType_):
    """This method is deprecated. Please switch to AddCVCollectionType_."""
    return AddCVCollectionType_(builder, CVCollectionType_)
def AddUnlockFavorRank(builder, UnlockFavorRank): builder.PrependInt64Slot(8, UnlockFavorRank, 0)
def CharacterVoiceExcelAddUnlockFavorRank(builder, UnlockFavorRank):
    """This method is deprecated. Please switch to AddUnlockFavorRank."""
    return AddUnlockFavorRank(builder, UnlockFavorRank)
def AddLocalizeCVGroup(builder, LocalizeCVGroup): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeCVGroup), 0)
def CharacterVoiceExcelAddLocalizeCVGroup(builder, LocalizeCVGroup):
    """This method is deprecated. Please switch to AddLocalizeCVGroup."""
    return AddLocalizeCVGroup(builder, LocalizeCVGroup)
def AddNation_(builder, Nation_): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(Nation_), 0)
def CharacterVoiceExcelAddNation_(builder, Nation_):
    """This method is deprecated. Please switch to AddNation_."""
    return AddNation_(builder, Nation_)
def StartNation_Vector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterVoiceExcelStartNation_Vector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartNation_Vector(builder, numElems)
def AddVolume(builder, Volume): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(Volume), 0)
def CharacterVoiceExcelAddVolume(builder, Volume):
    """This method is deprecated. Please switch to AddVolume."""
    return AddVolume(builder, Volume)
def StartVolumeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterVoiceExcelStartVolumeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVolumeVector(builder, numElems)
def AddDelay(builder, Delay): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(Delay), 0)
def CharacterVoiceExcelAddDelay(builder, Delay):
    """This method is deprecated. Please switch to AddDelay."""
    return AddDelay(builder, Delay)
def StartDelayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterVoiceExcelStartDelayVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDelayVector(builder, numElems)
def AddPath(builder, Path): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(Path), 0)
def CharacterVoiceExcelAddPath(builder, Path):
    """This method is deprecated. Please switch to AddPath."""
    return AddPath(builder, Path)
def StartPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterVoiceExcelStartPathVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPathVector(builder, numElems)
def End(builder): return builder.EndObject()
def CharacterVoiceExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
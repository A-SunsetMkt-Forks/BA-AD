# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldTutorialExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldTutorialExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldTutorialExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldTutorialExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldTutorialExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldTutorialExcel
    def TutorialType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldTutorialExcel
    def TutorialTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldTutorialExcel
    def TutorialTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldTutorialExcel
    def TutorialTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FieldTutorialExcel
    def ConditionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldTutorialExcel
    def ConditionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldTutorialExcel
    def ConditionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldTutorialExcel
    def ConditionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FieldTutorialExcel
    def ConditionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldTutorialExcel
    def ConditionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldTutorialExcel
    def ConditionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldTutorialExcel
    def ConditionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def FieldTutorialExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSeasonId(builder, SeasonId): builder.PrependInt64Slot(0, SeasonId, 0)
def FieldTutorialExcelAddSeasonId(builder, SeasonId):
    """This method is deprecated. Please switch to AddSeasonId."""
    return AddSeasonId(builder, SeasonId)
def AddTutorialType(builder, TutorialType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(TutorialType), 0)
def FieldTutorialExcelAddTutorialType(builder, TutorialType):
    """This method is deprecated. Please switch to AddTutorialType."""
    return AddTutorialType(builder, TutorialType)
def StartTutorialTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FieldTutorialExcelStartTutorialTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTutorialTypeVector(builder, numElems)
def AddConditionType(builder, ConditionType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionType), 0)
def FieldTutorialExcelAddConditionType(builder, ConditionType):
    """This method is deprecated. Please switch to AddConditionType."""
    return AddConditionType(builder, ConditionType)
def StartConditionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FieldTutorialExcelStartConditionTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionTypeVector(builder, numElems)
def AddConditionId(builder, ConditionId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionId), 0)
def FieldTutorialExcelAddConditionId(builder, ConditionId):
    """This method is deprecated. Please switch to AddConditionId."""
    return AddConditionId(builder, ConditionId)
def StartConditionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FieldTutorialExcelStartConditionIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionIdVector(builder, numElems)
def End(builder): return builder.EndObject()
def FieldTutorialExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConquestCalculateExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConquestCalculateExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConquestCalculateExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConquestCalculateExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConquestCalculateExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def CalculateConditionParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def CalculateConditionParcelUniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConquestCalculateExcel
    def CalculateConditionParcelAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(4)
def ConquestCalculateExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def ConquestCalculateExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddCalculateConditionParcelType(builder, CalculateConditionParcelType): builder.PrependInt32Slot(1, CalculateConditionParcelType, 0)
def ConquestCalculateExcelAddCalculateConditionParcelType(builder, CalculateConditionParcelType):
    """This method is deprecated. Please switch to AddCalculateConditionParcelType."""
    return AddCalculateConditionParcelType(builder, CalculateConditionParcelType)
def AddCalculateConditionParcelUniqueId(builder, CalculateConditionParcelUniqueId): builder.PrependInt64Slot(2, CalculateConditionParcelUniqueId, 0)
def ConquestCalculateExcelAddCalculateConditionParcelUniqueId(builder, CalculateConditionParcelUniqueId):
    """This method is deprecated. Please switch to AddCalculateConditionParcelUniqueId."""
    return AddCalculateConditionParcelUniqueId(builder, CalculateConditionParcelUniqueId)
def AddCalculateConditionParcelAmount(builder, CalculateConditionParcelAmount): builder.PrependInt64Slot(3, CalculateConditionParcelAmount, 0)
def ConquestCalculateExcelAddCalculateConditionParcelAmount(builder, CalculateConditionParcelAmount):
    """This method is deprecated. Please switch to AddCalculateConditionParcelAmount."""
    return AddCalculateConditionParcelAmount(builder, CalculateConditionParcelAmount)
def End(builder): return builder.EndObject()
def ConquestCalculateExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
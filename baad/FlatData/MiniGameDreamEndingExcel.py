# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamEndingExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamEndingExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamEndingExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamEndingExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamEndingExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def EndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def DreamMakerEndingType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def ScenarioGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamEndingExcel
    def EndingCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # MiniGameDreamEndingExcel
    def EndingConditionValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDreamEndingExcel
    def EndingConditionValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def Start(builder): builder.StartObject(7)
def MiniGameDreamEndingExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(0, EventContentId, 0)
def MiniGameDreamEndingExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddEndingId(builder, EndingId): builder.PrependInt64Slot(1, EndingId, 0)
def MiniGameDreamEndingExcelAddEndingId(builder, EndingId):
    """This method is deprecated. Please switch to AddEndingId."""
    return AddEndingId(builder, EndingId)
def AddDreamMakerEndingType_(builder, DreamMakerEndingType_): builder.PrependInt32Slot(2, DreamMakerEndingType_, 0)
def MiniGameDreamEndingExcelAddDreamMakerEndingType_(builder, DreamMakerEndingType_):
    """This method is deprecated. Please switch to AddDreamMakerEndingType_."""
    return AddDreamMakerEndingType_(builder, DreamMakerEndingType_)
def AddOrder(builder, Order): builder.PrependInt32Slot(3, Order, 0)
def MiniGameDreamEndingExcelAddOrder(builder, Order):
    """This method is deprecated. Please switch to AddOrder."""
    return AddOrder(builder, Order)
def AddScenarioGroupId(builder, ScenarioGroupId): builder.PrependInt64Slot(4, ScenarioGroupId, 0)
def MiniGameDreamEndingExcelAddScenarioGroupId(builder, ScenarioGroupId):
    """This method is deprecated. Please switch to AddScenarioGroupId."""
    return AddScenarioGroupId(builder, ScenarioGroupId)
def AddEndingCondition(builder, EndingCondition): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(EndingCondition), 0)
def MiniGameDreamEndingExcelAddEndingCondition(builder, EndingCondition):
    """This method is deprecated. Please switch to AddEndingCondition."""
    return AddEndingCondition(builder, EndingCondition)
def StartEndingConditionVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameDreamEndingExcelStartEndingConditionVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEndingConditionVector(builder, numElems)
def AddEndingConditionValue(builder, EndingConditionValue): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(EndingConditionValue), 0)
def MiniGameDreamEndingExcelAddEndingConditionValue(builder, EndingConditionValue):
    """This method is deprecated. Please switch to AddEndingConditionValue."""
    return AddEndingConditionValue(builder, EndingConditionValue)
def StartEndingConditionValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameDreamEndingExcelStartEndingConditionValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEndingConditionValueVector(builder, numElems)
def End(builder): return builder.EndObject()
def MiniGameDreamEndingExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
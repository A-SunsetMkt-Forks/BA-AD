# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterPotentialRewardExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterPotentialRewardExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterPotentialRewardExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterPotentialRewardExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterPotentialRewardExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterPotentialRewardExcel
    def RequirePotentialStatLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # CharacterPotentialRewardExcel
    def RewardParcelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialRewardExcel
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialRewardExcel
    def RewardAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(6)
def CharacterPotentialRewardExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterPotentialRewardExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddRequirePotentialStatType(builder, RequirePotentialStatType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(RequirePotentialStatType), 0)
def CharacterPotentialRewardExcelAddRequirePotentialStatType(builder, RequirePotentialStatType):
    """This method is deprecated. Please switch to AddRequirePotentialStatType."""
    return AddRequirePotentialStatType(builder, RequirePotentialStatType)
def StartRequirePotentialStatTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterPotentialRewardExcelStartRequirePotentialStatTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRequirePotentialStatTypeVector(builder, numElems)
def AddRequirePotentialStatLevel(builder, RequirePotentialStatLevel): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(RequirePotentialStatLevel), 0)
def CharacterPotentialRewardExcelAddRequirePotentialStatLevel(builder, RequirePotentialStatLevel):
    """This method is deprecated. Please switch to AddRequirePotentialStatLevel."""
    return AddRequirePotentialStatLevel(builder, RequirePotentialStatLevel)
def StartRequirePotentialStatLevelVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterPotentialRewardExcelStartRequirePotentialStatLevelVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartRequirePotentialStatLevelVector(builder, numElems)
def AddRewardParcelType(builder, RewardParcelType): builder.PrependInt32Slot(3, RewardParcelType, 0)
def CharacterPotentialRewardExcelAddRewardParcelType(builder, RewardParcelType):
    """This method is deprecated. Please switch to AddRewardParcelType."""
    return AddRewardParcelType(builder, RewardParcelType)
def AddRewardId(builder, RewardId): builder.PrependInt64Slot(4, RewardId, 0)
def CharacterPotentialRewardExcelAddRewardId(builder, RewardId):
    """This method is deprecated. Please switch to AddRewardId."""
    return AddRewardId(builder, RewardId)
def AddRewardAmount(builder, RewardAmount): builder.PrependInt32Slot(5, RewardAmount, 0)
def CharacterPotentialRewardExcelAddRewardAmount(builder, RewardAmount):
    """This method is deprecated. Please switch to AddRewardAmount."""
    return AddRewardAmount(builder, RewardAmount)
def End(builder): return builder.EndObject()
def CharacterPotentialRewardExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TimeAttackDungeonSeasonManageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TimeAttackDungeonSeasonManageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTimeAttackDungeonSeasonManageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TimeAttackDungeonSeasonManageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TimeAttackDungeonSeasonManageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def StartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TimeAttackDungeonSeasonManageExcel
    def EndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TimeAttackDungeonSeasonManageExcel
    def UISlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DungeonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def DifficultyGeasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # TimeAttackDungeonSeasonManageExcel
    def TimeAttackDungeonRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TimeAttackDungeonSeasonManageExcel
    def RoomLifeTimeInSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(8)
def TimeAttackDungeonSeasonManageExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def TimeAttackDungeonSeasonManageExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddStartDate(builder, StartDate): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(StartDate), 0)
def TimeAttackDungeonSeasonManageExcelAddStartDate(builder, StartDate):
    """This method is deprecated. Please switch to AddStartDate."""
    return AddStartDate(builder, StartDate)
def AddEndDate(builder, EndDate): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(EndDate), 0)
def TimeAttackDungeonSeasonManageExcelAddEndDate(builder, EndDate):
    """This method is deprecated. Please switch to AddEndDate."""
    return AddEndDate(builder, EndDate)
def AddUISlot(builder, UISlot): builder.PrependInt64Slot(3, UISlot, 0)
def TimeAttackDungeonSeasonManageExcelAddUISlot(builder, UISlot):
    """This method is deprecated. Please switch to AddUISlot."""
    return AddUISlot(builder, UISlot)
def AddDungeonId(builder, DungeonId): builder.PrependInt64Slot(4, DungeonId, 0)
def TimeAttackDungeonSeasonManageExcelAddDungeonId(builder, DungeonId):
    """This method is deprecated. Please switch to AddDungeonId."""
    return AddDungeonId(builder, DungeonId)
def AddDifficultyGeas(builder, DifficultyGeas): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(DifficultyGeas), 0)
def TimeAttackDungeonSeasonManageExcelAddDifficultyGeas(builder, DifficultyGeas):
    """This method is deprecated. Please switch to AddDifficultyGeas."""
    return AddDifficultyGeas(builder, DifficultyGeas)
def StartDifficultyGeasVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def TimeAttackDungeonSeasonManageExcelStartDifficultyGeasVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartDifficultyGeasVector(builder, numElems)
def AddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId): builder.PrependInt64Slot(6, TimeAttackDungeonRewardId, 0)
def TimeAttackDungeonSeasonManageExcelAddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId):
    """This method is deprecated. Please switch to AddTimeAttackDungeonRewardId."""
    return AddTimeAttackDungeonRewardId(builder, TimeAttackDungeonRewardId)
def AddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds): builder.PrependInt64Slot(7, RoomLifeTimeInSeconds, 0)
def TimeAttackDungeonSeasonManageExcelAddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds):
    """This method is deprecated. Please switch to AddRoomLifeTimeInSeconds."""
    return AddRoomLifeTimeInSeconds(builder, RoomLifeTimeInSeconds)
def End(builder): return builder.EndObject()
def TimeAttackDungeonSeasonManageExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
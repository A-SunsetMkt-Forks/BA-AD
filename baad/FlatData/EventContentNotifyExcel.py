# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventContentNotifyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventContentNotifyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEventContentNotifyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EventContentNotifyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventContentNotifyExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EventContentNotifyExcel
    def EventNotifyType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def EventTargetType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def ShortcutEventTargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EventContentNotifyExcel
    def IsShortcutEnable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(7)
def EventContentNotifyExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt32Slot(0, Id, 0)
def EventContentNotifyExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(1, LocalizeEtcId, 0)
def EventContentNotifyExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddIconPath(builder, IconPath): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(IconPath), 0)
def EventContentNotifyExcelAddIconPath(builder, IconPath):
    """This method is deprecated. Please switch to AddIconPath."""
    return AddIconPath(builder, IconPath)
def AddEventNotifyType_(builder, EventNotifyType_): builder.PrependInt32Slot(3, EventNotifyType_, 0)
def EventContentNotifyExcelAddEventNotifyType_(builder, EventNotifyType_):
    """This method is deprecated. Please switch to AddEventNotifyType_."""
    return AddEventNotifyType_(builder, EventNotifyType_)
def AddEventTargetType_(builder, EventTargetType_): builder.PrependInt32Slot(4, EventTargetType_, 0)
def EventContentNotifyExcelAddEventTargetType_(builder, EventTargetType_):
    """This method is deprecated. Please switch to AddEventTargetType_."""
    return AddEventTargetType_(builder, EventTargetType_)
def AddShortcutEventTargetType(builder, ShortcutEventTargetType): builder.PrependInt32Slot(5, ShortcutEventTargetType, 0)
def EventContentNotifyExcelAddShortcutEventTargetType(builder, ShortcutEventTargetType):
    """This method is deprecated. Please switch to AddShortcutEventTargetType."""
    return AddShortcutEventTargetType(builder, ShortcutEventTargetType)
def AddIsShortcutEnable(builder, IsShortcutEnable): builder.PrependBoolSlot(6, IsShortcutEnable, 0)
def EventContentNotifyExcelAddIsShortcutEnable(builder, IsShortcutEnable):
    """This method is deprecated. Please switch to AddIsShortcutEnable."""
    return AddIsShortcutEnable(builder, IsShortcutEnable)
def End(builder): return builder.EndObject()
def EventContentNotifyExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
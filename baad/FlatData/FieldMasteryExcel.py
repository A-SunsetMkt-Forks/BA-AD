# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldMasteryExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldMasteryExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldMasteryExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldMasteryExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldMasteryExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def ExpAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def TokenRequirement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def AccomplishmentConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldMasteryExcel
    def AccomplishmentConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(9)
def FieldMasteryExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def FieldMasteryExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddSeasonId(builder, SeasonId): builder.PrependInt64Slot(1, SeasonId, 0)
def FieldMasteryExcelAddSeasonId(builder, SeasonId):
    """This method is deprecated. Please switch to AddSeasonId."""
    return AddSeasonId(builder, SeasonId)
def AddOrder(builder, Order): builder.PrependInt32Slot(2, Order, 0)
def FieldMasteryExcelAddOrder(builder, Order):
    """This method is deprecated. Please switch to AddOrder."""
    return AddOrder(builder, Order)
def AddExpAmount(builder, ExpAmount): builder.PrependInt64Slot(3, ExpAmount, 0)
def FieldMasteryExcelAddExpAmount(builder, ExpAmount):
    """This method is deprecated. Please switch to AddExpAmount."""
    return AddExpAmount(builder, ExpAmount)
def AddTokenType(builder, TokenType): builder.PrependInt32Slot(4, TokenType, 0)
def FieldMasteryExcelAddTokenType(builder, TokenType):
    """This method is deprecated. Please switch to AddTokenType."""
    return AddTokenType(builder, TokenType)
def AddTokenId(builder, TokenId): builder.PrependInt64Slot(5, TokenId, 0)
def FieldMasteryExcelAddTokenId(builder, TokenId):
    """This method is deprecated. Please switch to AddTokenId."""
    return AddTokenId(builder, TokenId)
def AddTokenRequirement(builder, TokenRequirement): builder.PrependInt64Slot(6, TokenRequirement, 0)
def FieldMasteryExcelAddTokenRequirement(builder, TokenRequirement):
    """This method is deprecated. Please switch to AddTokenRequirement."""
    return AddTokenRequirement(builder, TokenRequirement)
def AddAccomplishmentConditionType(builder, AccomplishmentConditionType): builder.PrependInt32Slot(7, AccomplishmentConditionType, 0)
def FieldMasteryExcelAddAccomplishmentConditionType(builder, AccomplishmentConditionType):
    """This method is deprecated. Please switch to AddAccomplishmentConditionType."""
    return AddAccomplishmentConditionType(builder, AccomplishmentConditionType)
def AddAccomplishmentConditionId(builder, AccomplishmentConditionId): builder.PrependInt64Slot(8, AccomplishmentConditionId, 0)
def FieldMasteryExcelAddAccomplishmentConditionId(builder, AccomplishmentConditionId):
    """This method is deprecated. Please switch to AddAccomplishmentConditionId."""
    return AddAccomplishmentConditionId(builder, AccomplishmentConditionId)
def End(builder): return builder.EndObject()
def FieldMasteryExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
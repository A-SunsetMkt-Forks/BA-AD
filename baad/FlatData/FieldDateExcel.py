# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldDateExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldDateExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldDateExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldDateExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldDateExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def OpenDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def DateLocalizeKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldDateExcel
    def EntrySceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def StartConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def StartConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def EndConditionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def EndConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def OpenConditionStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldDateExcel
    def DateResultSpinePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldDateExcel
    def DateResultSpineOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(12)
def FieldDateExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def FieldDateExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddSeasonId(builder, SeasonId): builder.PrependInt64Slot(1, SeasonId, 0)
def FieldDateExcelAddSeasonId(builder, SeasonId):
    """This method is deprecated. Please switch to AddSeasonId."""
    return AddSeasonId(builder, SeasonId)
def AddOpenDate(builder, OpenDate): builder.PrependInt64Slot(2, OpenDate, 0)
def FieldDateExcelAddOpenDate(builder, OpenDate):
    """This method is deprecated. Please switch to AddOpenDate."""
    return AddOpenDate(builder, OpenDate)
def AddDateLocalizeKey(builder, DateLocalizeKey): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(DateLocalizeKey), 0)
def FieldDateExcelAddDateLocalizeKey(builder, DateLocalizeKey):
    """This method is deprecated. Please switch to AddDateLocalizeKey."""
    return AddDateLocalizeKey(builder, DateLocalizeKey)
def AddEntrySceneId(builder, EntrySceneId): builder.PrependInt64Slot(4, EntrySceneId, 0)
def FieldDateExcelAddEntrySceneId(builder, EntrySceneId):
    """This method is deprecated. Please switch to AddEntrySceneId."""
    return AddEntrySceneId(builder, EntrySceneId)
def AddStartConditionType(builder, StartConditionType): builder.PrependInt32Slot(5, StartConditionType, 0)
def FieldDateExcelAddStartConditionType(builder, StartConditionType):
    """This method is deprecated. Please switch to AddStartConditionType."""
    return AddStartConditionType(builder, StartConditionType)
def AddStartConditionId(builder, StartConditionId): builder.PrependInt64Slot(6, StartConditionId, 0)
def FieldDateExcelAddStartConditionId(builder, StartConditionId):
    """This method is deprecated. Please switch to AddStartConditionId."""
    return AddStartConditionId(builder, StartConditionId)
def AddEndConditionType(builder, EndConditionType): builder.PrependInt32Slot(7, EndConditionType, 0)
def FieldDateExcelAddEndConditionType(builder, EndConditionType):
    """This method is deprecated. Please switch to AddEndConditionType."""
    return AddEndConditionType(builder, EndConditionType)
def AddEndConditionId(builder, EndConditionId): builder.PrependInt64Slot(8, EndConditionId, 0)
def FieldDateExcelAddEndConditionId(builder, EndConditionId):
    """This method is deprecated. Please switch to AddEndConditionId."""
    return AddEndConditionId(builder, EndConditionId)
def AddOpenConditionStage(builder, OpenConditionStage): builder.PrependInt64Slot(9, OpenConditionStage, 0)
def FieldDateExcelAddOpenConditionStage(builder, OpenConditionStage):
    """This method is deprecated. Please switch to AddOpenConditionStage."""
    return AddOpenConditionStage(builder, OpenConditionStage)
def AddDateResultSpinePath(builder, DateResultSpinePath): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(DateResultSpinePath), 0)
def FieldDateExcelAddDateResultSpinePath(builder, DateResultSpinePath):
    """This method is deprecated. Please switch to AddDateResultSpinePath."""
    return AddDateResultSpinePath(builder, DateResultSpinePath)
def AddDateResultSpineOffsetX(builder, DateResultSpineOffsetX): builder.PrependFloat32Slot(11, DateResultSpineOffsetX, 0.0)
def FieldDateExcelAddDateResultSpineOffsetX(builder, DateResultSpineOffsetX):
    """This method is deprecated. Please switch to AddDateResultSpineOffsetX."""
    return AddDateResultSpineOffsetX(builder, DateResultSpineOffsetX)
def End(builder): return builder.EndObject()
def FieldDateExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
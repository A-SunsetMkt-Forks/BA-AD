# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StoryStrategyExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StoryStrategyExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStoryStrategyExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # StoryStrategyExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StoryStrategyExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StoryStrategyExcel
    def Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StoryStrategyExcel
    def StageEnterEchelonCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def WhiteListId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def StrategyMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StoryStrategyExcel
    def StrategyMapBG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # StoryStrategyExcel
    def MaxTurn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def StageTopography_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def StrategyEnvironment_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def ContentType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def BGMId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StoryStrategyExcel
    def FirstClearReportEventName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(14)
def StoryStrategyExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def StoryStrategyExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddName(builder, Name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def StoryStrategyExcelAddName(builder, Name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, Name)
def AddLocalize(builder, Localize): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Localize), 0)
def StoryStrategyExcelAddLocalize(builder, Localize):
    """This method is deprecated. Please switch to AddLocalize."""
    return AddLocalize(builder, Localize)
def AddStageEnterEchelonCount(builder, StageEnterEchelonCount): builder.PrependInt32Slot(3, StageEnterEchelonCount, 0)
def StoryStrategyExcelAddStageEnterEchelonCount(builder, StageEnterEchelonCount):
    """This method is deprecated. Please switch to AddStageEnterEchelonCount."""
    return AddStageEnterEchelonCount(builder, StageEnterEchelonCount)
def AddBattleDuration(builder, BattleDuration): builder.PrependInt64Slot(4, BattleDuration, 0)
def StoryStrategyExcelAddBattleDuration(builder, BattleDuration):
    """This method is deprecated. Please switch to AddBattleDuration."""
    return AddBattleDuration(builder, BattleDuration)
def AddWhiteListId(builder, WhiteListId): builder.PrependInt64Slot(5, WhiteListId, 0)
def StoryStrategyExcelAddWhiteListId(builder, WhiteListId):
    """This method is deprecated. Please switch to AddWhiteListId."""
    return AddWhiteListId(builder, WhiteListId)
def AddStrategyMap(builder, StrategyMap): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(StrategyMap), 0)
def StoryStrategyExcelAddStrategyMap(builder, StrategyMap):
    """This method is deprecated. Please switch to AddStrategyMap."""
    return AddStrategyMap(builder, StrategyMap)
def AddStrategyMapBG(builder, StrategyMapBG): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(StrategyMapBG), 0)
def StoryStrategyExcelAddStrategyMapBG(builder, StrategyMapBG):
    """This method is deprecated. Please switch to AddStrategyMapBG."""
    return AddStrategyMapBG(builder, StrategyMapBG)
def AddMaxTurn(builder, MaxTurn): builder.PrependInt32Slot(8, MaxTurn, 0)
def StoryStrategyExcelAddMaxTurn(builder, MaxTurn):
    """This method is deprecated. Please switch to AddMaxTurn."""
    return AddMaxTurn(builder, MaxTurn)
def AddStageTopography_(builder, StageTopography_): builder.PrependInt32Slot(9, StageTopography_, 0)
def StoryStrategyExcelAddStageTopography_(builder, StageTopography_):
    """This method is deprecated. Please switch to AddStageTopography_."""
    return AddStageTopography_(builder, StageTopography_)
def AddStrategyEnvironment_(builder, StrategyEnvironment_): builder.PrependInt32Slot(10, StrategyEnvironment_, 0)
def StoryStrategyExcelAddStrategyEnvironment_(builder, StrategyEnvironment_):
    """This method is deprecated. Please switch to AddStrategyEnvironment_."""
    return AddStrategyEnvironment_(builder, StrategyEnvironment_)
def AddContentType_(builder, ContentType_): builder.PrependInt32Slot(11, ContentType_, 0)
def StoryStrategyExcelAddContentType_(builder, ContentType_):
    """This method is deprecated. Please switch to AddContentType_."""
    return AddContentType_(builder, ContentType_)
def AddBGMId(builder, BGMId): builder.PrependInt64Slot(12, BGMId, 0)
def StoryStrategyExcelAddBGMId(builder, BGMId):
    """This method is deprecated. Please switch to AddBGMId."""
    return AddBGMId(builder, BGMId)
def AddFirstClearReportEventName(builder, FirstClearReportEventName): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(FirstClearReportEventName), 0)
def StoryStrategyExcelAddFirstClearReportEventName(builder, FirstClearReportEventName):
    """This method is deprecated. Please switch to AddFirstClearReportEventName."""
    return AddFirstClearReportEventName(builder, FirstClearReportEventName)
def End(builder): return builder.EndObject()
def StoryStrategyExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ConstMiniGameShootingExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ConstMiniGameShootingExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConstMiniGameShootingExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ConstMiniGameShootingExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ConstMiniGameShootingExcel
    def NormalStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def NormalSectionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def HardStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def HardSectionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def FreeStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def FreeSectionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def PlayerCharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ConstMiniGameShootingExcel
    def PlayerCharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ConstMiniGameShootingExcel
    def PlayerCharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ConstMiniGameShootingExcel
    def PlayerCharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # ConstMiniGameShootingExcel
    def HiddenPlayerCharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ConstMiniGameShootingExcel
    def CameraSmoothTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMiniGameShootingExcel
    def SpawnEffectPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ConstMiniGameShootingExcel
    def WaitTimeAfterSpawn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ConstMiniGameShootingExcel
    def FreeGearInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(12)
def ConstMiniGameShootingExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddNormalStageId(builder, NormalStageId): builder.PrependInt64Slot(0, NormalStageId, 0)
def ConstMiniGameShootingExcelAddNormalStageId(builder, NormalStageId):
    """This method is deprecated. Please switch to AddNormalStageId."""
    return AddNormalStageId(builder, NormalStageId)
def AddNormalSectionCount(builder, NormalSectionCount): builder.PrependInt32Slot(1, NormalSectionCount, 0)
def ConstMiniGameShootingExcelAddNormalSectionCount(builder, NormalSectionCount):
    """This method is deprecated. Please switch to AddNormalSectionCount."""
    return AddNormalSectionCount(builder, NormalSectionCount)
def AddHardStageId(builder, HardStageId): builder.PrependInt64Slot(2, HardStageId, 0)
def ConstMiniGameShootingExcelAddHardStageId(builder, HardStageId):
    """This method is deprecated. Please switch to AddHardStageId."""
    return AddHardStageId(builder, HardStageId)
def AddHardSectionCount(builder, HardSectionCount): builder.PrependInt32Slot(3, HardSectionCount, 0)
def ConstMiniGameShootingExcelAddHardSectionCount(builder, HardSectionCount):
    """This method is deprecated. Please switch to AddHardSectionCount."""
    return AddHardSectionCount(builder, HardSectionCount)
def AddFreeStageId(builder, FreeStageId): builder.PrependInt64Slot(4, FreeStageId, 0)
def ConstMiniGameShootingExcelAddFreeStageId(builder, FreeStageId):
    """This method is deprecated. Please switch to AddFreeStageId."""
    return AddFreeStageId(builder, FreeStageId)
def AddFreeSectionCount(builder, FreeSectionCount): builder.PrependInt32Slot(5, FreeSectionCount, 0)
def ConstMiniGameShootingExcelAddFreeSectionCount(builder, FreeSectionCount):
    """This method is deprecated. Please switch to AddFreeSectionCount."""
    return AddFreeSectionCount(builder, FreeSectionCount)
def AddPlayerCharacterId(builder, PlayerCharacterId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(PlayerCharacterId), 0)
def ConstMiniGameShootingExcelAddPlayerCharacterId(builder, PlayerCharacterId):
    """This method is deprecated. Please switch to AddPlayerCharacterId."""
    return AddPlayerCharacterId(builder, PlayerCharacterId)
def StartPlayerCharacterIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ConstMiniGameShootingExcelStartPlayerCharacterIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPlayerCharacterIdVector(builder, numElems)
def AddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId): builder.PrependInt64Slot(7, HiddenPlayerCharacterId, 0)
def ConstMiniGameShootingExcelAddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId):
    """This method is deprecated. Please switch to AddHiddenPlayerCharacterId."""
    return AddHiddenPlayerCharacterId(builder, HiddenPlayerCharacterId)
def AddCameraSmoothTime(builder, CameraSmoothTime): builder.PrependFloat32Slot(8, CameraSmoothTime, 0.0)
def ConstMiniGameShootingExcelAddCameraSmoothTime(builder, CameraSmoothTime):
    """This method is deprecated. Please switch to AddCameraSmoothTime."""
    return AddCameraSmoothTime(builder, CameraSmoothTime)
def AddSpawnEffectPath(builder, SpawnEffectPath): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(SpawnEffectPath), 0)
def ConstMiniGameShootingExcelAddSpawnEffectPath(builder, SpawnEffectPath):
    """This method is deprecated. Please switch to AddSpawnEffectPath."""
    return AddSpawnEffectPath(builder, SpawnEffectPath)
def AddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn): builder.PrependFloat32Slot(10, WaitTimeAfterSpawn, 0.0)
def ConstMiniGameShootingExcelAddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn):
    """This method is deprecated. Please switch to AddWaitTimeAfterSpawn."""
    return AddWaitTimeAfterSpawn(builder, WaitTimeAfterSpawn)
def AddFreeGearInterval(builder, FreeGearInterval): builder.PrependInt32Slot(11, FreeGearInterval, 0)
def ConstMiniGameShootingExcelAddFreeGearInterval(builder, FreeGearInterval):
    """This method is deprecated. Please switch to AddFreeGearInterval."""
    return AddFreeGearInterval(builder, FreeGearInterval)
def End(builder): return builder.EndObject()
def ConstMiniGameShootingExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldInteractionExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldInteractionExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFieldInteractionExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FieldInteractionExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldInteractionExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def FieldDateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def ShowEmoji(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FieldInteractionExcel
    def KeywordLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FieldInteractionExcel
    def FieldSeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def InteractionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldInteractionExcel
    def InteractionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldInteractionExcel
    def InteractionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def InteractionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FieldInteractionExcel
    def InteractionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def InteractionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def InteractionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def InteractionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # FieldInteractionExcel
    def ConditionClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FieldInteractionExcel
    def ConditionClassParameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionClassParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # FieldInteractionExcel
    def OnceOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FieldInteractionExcel
    def ConditionIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionIndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # FieldInteractionExcel
    def ConditionType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FieldInteractionExcel
    def ConditionTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # FieldInteractionExcel
    def ConditionId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FieldInteractionExcel
    def ConditionIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FieldInteractionExcel
    def ConditionIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def ConditionIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # FieldInteractionExcel
    def NegateCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldInteractionExcel
    def NegateConditionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # FieldInteractionExcel
    def NegateConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldInteractionExcel
    def NegateConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def Start(builder): builder.StartObject(14)
def FieldInteractionExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def FieldInteractionExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddFieldDateId(builder, FieldDateId): builder.PrependInt64Slot(1, FieldDateId, 0)
def FieldInteractionExcelAddFieldDateId(builder, FieldDateId):
    """This method is deprecated. Please switch to AddFieldDateId."""
    return AddFieldDateId(builder, FieldDateId)
def AddShowEmoji(builder, ShowEmoji): builder.PrependBoolSlot(2, ShowEmoji, 0)
def FieldInteractionExcelAddShowEmoji(builder, ShowEmoji):
    """This method is deprecated. Please switch to AddShowEmoji."""
    return AddShowEmoji(builder, ShowEmoji)
def AddKeywordLocalize(builder, KeywordLocalize): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(KeywordLocalize), 0)
def FieldInteractionExcelAddKeywordLocalize(builder, KeywordLocalize):
    """This method is deprecated. Please switch to AddKeywordLocalize."""
    return AddKeywordLocalize(builder, KeywordLocalize)
def AddFieldSeasonId(builder, FieldSeasonId): builder.PrependInt64Slot(4, FieldSeasonId, 0)
def FieldInteractionExcelAddFieldSeasonId(builder, FieldSeasonId):
    """This method is deprecated. Please switch to AddFieldSeasonId."""
    return AddFieldSeasonId(builder, FieldSeasonId)
def AddInteractionType(builder, InteractionType): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(InteractionType), 0)
def FieldInteractionExcelAddInteractionType(builder, InteractionType):
    """This method is deprecated. Please switch to AddInteractionType."""
    return AddInteractionType(builder, InteractionType)
def StartInteractionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FieldInteractionExcelStartInteractionTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInteractionTypeVector(builder, numElems)
def AddInteractionId(builder, InteractionId): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(InteractionId), 0)
def FieldInteractionExcelAddInteractionId(builder, InteractionId):
    """This method is deprecated. Please switch to AddInteractionId."""
    return AddInteractionId(builder, InteractionId)
def StartInteractionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FieldInteractionExcelStartInteractionIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartInteractionIdVector(builder, numElems)
def AddConditionClass(builder, ConditionClass): builder.PrependInt32Slot(7, ConditionClass, 0)
def FieldInteractionExcelAddConditionClass(builder, ConditionClass):
    """This method is deprecated. Please switch to AddConditionClass."""
    return AddConditionClass(builder, ConditionClass)
def AddConditionClassParameters(builder, ConditionClassParameters): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionClassParameters), 0)
def FieldInteractionExcelAddConditionClassParameters(builder, ConditionClassParameters):
    """This method is deprecated. Please switch to AddConditionClassParameters."""
    return AddConditionClassParameters(builder, ConditionClassParameters)
def StartConditionClassParametersVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FieldInteractionExcelStartConditionClassParametersVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionClassParametersVector(builder, numElems)
def AddOnceOnly(builder, OnceOnly): builder.PrependBoolSlot(9, OnceOnly, 0)
def FieldInteractionExcelAddOnceOnly(builder, OnceOnly):
    """This method is deprecated. Please switch to AddOnceOnly."""
    return AddOnceOnly(builder, OnceOnly)
def AddConditionIndex(builder, ConditionIndex): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionIndex), 0)
def FieldInteractionExcelAddConditionIndex(builder, ConditionIndex):
    """This method is deprecated. Please switch to AddConditionIndex."""
    return AddConditionIndex(builder, ConditionIndex)
def StartConditionIndexVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FieldInteractionExcelStartConditionIndexVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionIndexVector(builder, numElems)
def AddConditionType(builder, ConditionType): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionType), 0)
def FieldInteractionExcelAddConditionType(builder, ConditionType):
    """This method is deprecated. Please switch to AddConditionType."""
    return AddConditionType(builder, ConditionType)
def StartConditionTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FieldInteractionExcelStartConditionTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionTypeVector(builder, numElems)
def AddConditionId(builder, ConditionId): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(ConditionId), 0)
def FieldInteractionExcelAddConditionId(builder, ConditionId):
    """This method is deprecated. Please switch to AddConditionId."""
    return AddConditionId(builder, ConditionId)
def StartConditionIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FieldInteractionExcelStartConditionIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartConditionIdVector(builder, numElems)
def AddNegateCondition(builder, NegateCondition): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(NegateCondition), 0)
def FieldInteractionExcelAddNegateCondition(builder, NegateCondition):
    """This method is deprecated. Please switch to AddNegateCondition."""
    return AddNegateCondition(builder, NegateCondition)
def StartNegateConditionVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FieldInteractionExcelStartNegateConditionVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartNegateConditionVector(builder, numElems)
def End(builder): return builder.EndObject()
def FieldInteractionExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
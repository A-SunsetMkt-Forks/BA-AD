# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EchelonConstraintExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EchelonConstraintExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEchelonConstraintExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EchelonConstraintExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EchelonConstraintExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def IsWhiteList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EchelonConstraintExcel
    def CharacterId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def CharacterIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def CharacterIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # EchelonConstraintExcel
    def PersonalityId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EchelonConstraintExcel
    def PersonalityIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EchelonConstraintExcel
    def PersonalityIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # EchelonConstraintExcel
    def WeaponType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def School_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Club_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EchelonConstraintExcel
    def Role(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(8)
def EchelonConstraintExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddGroupId(builder, GroupId): builder.PrependInt64Slot(0, GroupId, 0)
def EchelonConstraintExcelAddGroupId(builder, GroupId):
    """This method is deprecated. Please switch to AddGroupId."""
    return AddGroupId(builder, GroupId)
def AddIsWhiteList(builder, IsWhiteList): builder.PrependBoolSlot(1, IsWhiteList, 0)
def EchelonConstraintExcelAddIsWhiteList(builder, IsWhiteList):
    """This method is deprecated. Please switch to AddIsWhiteList."""
    return AddIsWhiteList(builder, IsWhiteList)
def AddCharacterId(builder, CharacterId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(CharacterId), 0)
def EchelonConstraintExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def StartCharacterIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EchelonConstraintExcelStartCharacterIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCharacterIdVector(builder, numElems)
def AddPersonalityId(builder, PersonalityId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(PersonalityId), 0)
def EchelonConstraintExcelAddPersonalityId(builder, PersonalityId):
    """This method is deprecated. Please switch to AddPersonalityId."""
    return AddPersonalityId(builder, PersonalityId)
def StartPersonalityIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EchelonConstraintExcelStartPersonalityIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPersonalityIdVector(builder, numElems)
def AddWeaponType_(builder, WeaponType_): builder.PrependInt32Slot(4, WeaponType_, 0)
def EchelonConstraintExcelAddWeaponType_(builder, WeaponType_):
    """This method is deprecated. Please switch to AddWeaponType_."""
    return AddWeaponType_(builder, WeaponType_)
def AddSchool_(builder, School_): builder.PrependInt32Slot(5, School_, 0)
def EchelonConstraintExcelAddSchool_(builder, School_):
    """This method is deprecated. Please switch to AddSchool_."""
    return AddSchool_(builder, School_)
def AddClub_(builder, Club_): builder.PrependInt32Slot(6, Club_, 0)
def EchelonConstraintExcelAddClub_(builder, Club_):
    """This method is deprecated. Please switch to AddClub_."""
    return AddClub_(builder, Club_)
def AddRole(builder, Role): builder.PrependInt32Slot(7, Role, 0)
def EchelonConstraintExcelAddRole(builder, Role):
    """This method is deprecated. Please switch to AddRole."""
    return AddRole(builder, Role)
def End(builder): return builder.EndObject()
def EchelonConstraintExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
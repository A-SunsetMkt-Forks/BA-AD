# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDefenseStageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDefenseStageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDefenseStageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDefenseStageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDefenseStageExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDefenseStageExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDifficulty_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDifficultyLocalize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def PrevStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def EchelonExtensionType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def BattleDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageEnterCostAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def EventContentStageRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def EnterScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def ClearScenarioGroupIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # MiniGameDefenseStageExcel
    def StageTopography_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def RecommandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def GroundID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def ContentType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # MiniGameDefenseStageExcel
    def StarGoalAmount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MiniGameDefenseStageExcel
    def StarGoalAmountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # MiniGameDefenseStageExcel
    def DefenseFormationBGPrefab(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDefenseStageExcel
    def DefenseFormationBGPrefabScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MiniGameDefenseStageExcel
    def FixedEchelon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def MininageDefenseFixedStatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDefenseStageExcel
    def StageHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(27)
def MiniGameDefenseStageExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def MiniGameDefenseStageExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddName(builder, Name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(Name), 0)
def MiniGameDefenseStageExcelAddName(builder, Name):
    """This method is deprecated. Please switch to AddName."""
    return AddName(builder, Name)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(2, EventContentId, 0)
def MiniGameDefenseStageExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddStageDifficulty_(builder, StageDifficulty_): builder.PrependInt32Slot(3, StageDifficulty_, 0)
def MiniGameDefenseStageExcelAddStageDifficulty_(builder, StageDifficulty_):
    """This method is deprecated. Please switch to AddStageDifficulty_."""
    return AddStageDifficulty_(builder, StageDifficulty_)
def AddStageDifficultyLocalize(builder, StageDifficultyLocalize): builder.PrependUint32Slot(4, StageDifficultyLocalize, 0)
def MiniGameDefenseStageExcelAddStageDifficultyLocalize(builder, StageDifficultyLocalize):
    """This method is deprecated. Please switch to AddStageDifficultyLocalize."""
    return AddStageDifficultyLocalize(builder, StageDifficultyLocalize)
def AddStageNumber(builder, StageNumber): builder.PrependInt32Slot(5, StageNumber, 0)
def MiniGameDefenseStageExcelAddStageNumber(builder, StageNumber):
    """This method is deprecated. Please switch to AddStageNumber."""
    return AddStageNumber(builder, StageNumber)
def AddStageDisplay(builder, StageDisplay): builder.PrependInt32Slot(6, StageDisplay, 0)
def MiniGameDefenseStageExcelAddStageDisplay(builder, StageDisplay):
    """This method is deprecated. Please switch to AddStageDisplay."""
    return AddStageDisplay(builder, StageDisplay)
def AddPrevStageId(builder, PrevStageId): builder.PrependInt64Slot(7, PrevStageId, 0)
def MiniGameDefenseStageExcelAddPrevStageId(builder, PrevStageId):
    """This method is deprecated. Please switch to AddPrevStageId."""
    return AddPrevStageId(builder, PrevStageId)
def AddEchelonExtensionType_(builder, EchelonExtensionType_): builder.PrependInt32Slot(8, EchelonExtensionType_, 0)
def MiniGameDefenseStageExcelAddEchelonExtensionType_(builder, EchelonExtensionType_):
    """This method is deprecated. Please switch to AddEchelonExtensionType_."""
    return AddEchelonExtensionType_(builder, EchelonExtensionType_)
def AddBattleDuration(builder, BattleDuration): builder.PrependInt64Slot(9, BattleDuration, 0)
def MiniGameDefenseStageExcelAddBattleDuration(builder, BattleDuration):
    """This method is deprecated. Please switch to AddBattleDuration."""
    return AddBattleDuration(builder, BattleDuration)
def AddStageEnterCostType(builder, StageEnterCostType): builder.PrependInt32Slot(10, StageEnterCostType, 0)
def MiniGameDefenseStageExcelAddStageEnterCostType(builder, StageEnterCostType):
    """This method is deprecated. Please switch to AddStageEnterCostType."""
    return AddStageEnterCostType(builder, StageEnterCostType)
def AddStageEnterCostId(builder, StageEnterCostId): builder.PrependInt64Slot(11, StageEnterCostId, 0)
def MiniGameDefenseStageExcelAddStageEnterCostId(builder, StageEnterCostId):
    """This method is deprecated. Please switch to AddStageEnterCostId."""
    return AddStageEnterCostId(builder, StageEnterCostId)
def AddStageEnterCostAmount(builder, StageEnterCostAmount): builder.PrependInt32Slot(12, StageEnterCostAmount, 0)
def MiniGameDefenseStageExcelAddStageEnterCostAmount(builder, StageEnterCostAmount):
    """This method is deprecated. Please switch to AddStageEnterCostAmount."""
    return AddStageEnterCostAmount(builder, StageEnterCostAmount)
def AddEventContentStageRewardId(builder, EventContentStageRewardId): builder.PrependInt64Slot(13, EventContentStageRewardId, 0)
def MiniGameDefenseStageExcelAddEventContentStageRewardId(builder, EventContentStageRewardId):
    """This method is deprecated. Please switch to AddEventContentStageRewardId."""
    return AddEventContentStageRewardId(builder, EventContentStageRewardId)
def AddEnterScenarioGroupId(builder, EnterScenarioGroupId): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(EnterScenarioGroupId), 0)
def MiniGameDefenseStageExcelAddEnterScenarioGroupId(builder, EnterScenarioGroupId):
    """This method is deprecated. Please switch to AddEnterScenarioGroupId."""
    return AddEnterScenarioGroupId(builder, EnterScenarioGroupId)
def StartEnterScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameDefenseStageExcelStartEnterScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEnterScenarioGroupIdVector(builder, numElems)
def AddClearScenarioGroupId(builder, ClearScenarioGroupId): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(ClearScenarioGroupId), 0)
def MiniGameDefenseStageExcelAddClearScenarioGroupId(builder, ClearScenarioGroupId):
    """This method is deprecated. Please switch to AddClearScenarioGroupId."""
    return AddClearScenarioGroupId(builder, ClearScenarioGroupId)
def StartClearScenarioGroupIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MiniGameDefenseStageExcelStartClearScenarioGroupIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartClearScenarioGroupIdVector(builder, numElems)
def AddStageTopography_(builder, StageTopography_): builder.PrependInt32Slot(16, StageTopography_, 0)
def MiniGameDefenseStageExcelAddStageTopography_(builder, StageTopography_):
    """This method is deprecated. Please switch to AddStageTopography_."""
    return AddStageTopography_(builder, StageTopography_)
def AddRecommandLevel(builder, RecommandLevel): builder.PrependInt32Slot(17, RecommandLevel, 0)
def MiniGameDefenseStageExcelAddRecommandLevel(builder, RecommandLevel):
    """This method is deprecated. Please switch to AddRecommandLevel."""
    return AddRecommandLevel(builder, RecommandLevel)
def AddGroundID(builder, GroundID): builder.PrependInt64Slot(18, GroundID, 0)
def MiniGameDefenseStageExcelAddGroundID(builder, GroundID):
    """This method is deprecated. Please switch to AddGroundID."""
    return AddGroundID(builder, GroundID)
def AddContentType_(builder, ContentType_): builder.PrependInt32Slot(19, ContentType_, 0)
def MiniGameDefenseStageExcelAddContentType_(builder, ContentType_):
    """This method is deprecated. Please switch to AddContentType_."""
    return AddContentType_(builder, ContentType_)
def AddStarGoal(builder, StarGoal): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(StarGoal), 0)
def MiniGameDefenseStageExcelAddStarGoal(builder, StarGoal):
    """This method is deprecated. Please switch to AddStarGoal."""
    return AddStarGoal(builder, StarGoal)
def StartStarGoalVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameDefenseStageExcelStartStarGoalVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStarGoalVector(builder, numElems)
def AddStarGoalAmount(builder, StarGoalAmount): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(StarGoalAmount), 0)
def MiniGameDefenseStageExcelAddStarGoalAmount(builder, StarGoalAmount):
    """This method is deprecated. Please switch to AddStarGoalAmount."""
    return AddStarGoalAmount(builder, StarGoalAmount)
def StartStarGoalAmountVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MiniGameDefenseStageExcelStartStarGoalAmountVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStarGoalAmountVector(builder, numElems)
def AddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefab): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(DefenseFormationBGPrefab), 0)
def MiniGameDefenseStageExcelAddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefab):
    """This method is deprecated. Please switch to AddDefenseFormationBGPrefab."""
    return AddDefenseFormationBGPrefab(builder, DefenseFormationBGPrefab)
def AddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale): builder.PrependFloat32Slot(23, DefenseFormationBGPrefabScale, 0.0)
def MiniGameDefenseStageExcelAddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale):
    """This method is deprecated. Please switch to AddDefenseFormationBGPrefabScale."""
    return AddDefenseFormationBGPrefabScale(builder, DefenseFormationBGPrefabScale)
def AddFixedEchelon(builder, FixedEchelon): builder.PrependInt64Slot(24, FixedEchelon, 0)
def MiniGameDefenseStageExcelAddFixedEchelon(builder, FixedEchelon):
    """This method is deprecated. Please switch to AddFixedEchelon."""
    return AddFixedEchelon(builder, FixedEchelon)
def AddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId): builder.PrependInt64Slot(25, MininageDefenseFixedStatId, 0)
def MiniGameDefenseStageExcelAddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId):
    """This method is deprecated. Please switch to AddMininageDefenseFixedStatId."""
    return AddMininageDefenseFixedStatId(builder, MininageDefenseFixedStatId)
def AddStageHint(builder, StageHint): builder.PrependUint32Slot(26, StageHint, 0)
def MiniGameDefenseStageExcelAddStageHint(builder, StageHint):
    """This method is deprecated. Please switch to AddStageHint."""
    return AddStageHint(builder, StageHint)
def End(builder): return builder.EndObject()
def MiniGameDefenseStageExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
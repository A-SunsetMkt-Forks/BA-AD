# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DevName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CostumeGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def IsPlayable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def ProductionStep_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CollectionVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def ReleaseDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CollectionVisibleStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def CollectionVisibleEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def IsPlayableCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Rarity_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def IsNPC(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def TacticEntityType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CanSurvive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsDummy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def SubPartsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRole_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def WeaponType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def TacticRange_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def BulletType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ArmorType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AimIKType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def School_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Club_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DefaultStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MaxStarGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def StatLevelUpType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SquadType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Jumpable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def PersonalityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterAIId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ExternalBTId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MainCombatStyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CombatStyleIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def ScenarioCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterExcel
    def SpawnTemplateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def FavorLevelupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def EquipmentSlot(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def EquipmentSlotAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def EquipmentSlotLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def EquipmentSlotIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # CharacterExcel
    def WeaponLocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def DisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def BodyRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def RandomEffectRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def HPBarHide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def HpBarHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def HighlightFloaterHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EmojiOffsetX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def EmojiOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CharacterExcel
    def MoveStartFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def MoveEndFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def JumpMotionFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def AppearFrame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CanMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanFix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanCrowdControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def CanBattleItemMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def IsAirUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # CharacterExcel
    def AirUnitHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # CharacterExcel
    def SecretStoneItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def SecretStoneItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CharacterPieceItemAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterExcel
    def CombineRecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(64)
def CharacterExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddDevName(builder, DevName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(DevName), 0)
def CharacterExcelAddDevName(builder, DevName):
    """This method is deprecated. Please switch to AddDevName."""
    return AddDevName(builder, DevName)
def AddCostumeGroupId(builder, CostumeGroupId): builder.PrependInt64Slot(2, CostumeGroupId, 0)
def CharacterExcelAddCostumeGroupId(builder, CostumeGroupId):
    """This method is deprecated. Please switch to AddCostumeGroupId."""
    return AddCostumeGroupId(builder, CostumeGroupId)
def AddIsPlayable(builder, IsPlayable): builder.PrependBoolSlot(3, IsPlayable, 0)
def CharacterExcelAddIsPlayable(builder, IsPlayable):
    """This method is deprecated. Please switch to AddIsPlayable."""
    return AddIsPlayable(builder, IsPlayable)
def AddProductionStep_(builder, ProductionStep_): builder.PrependInt32Slot(4, ProductionStep_, 0)
def CharacterExcelAddProductionStep_(builder, ProductionStep_):
    """This method is deprecated. Please switch to AddProductionStep_."""
    return AddProductionStep_(builder, ProductionStep_)
def AddCollectionVisible(builder, CollectionVisible): builder.PrependBoolSlot(5, CollectionVisible, 0)
def CharacterExcelAddCollectionVisible(builder, CollectionVisible):
    """This method is deprecated. Please switch to AddCollectionVisible."""
    return AddCollectionVisible(builder, CollectionVisible)
def AddReleaseDate(builder, ReleaseDate): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ReleaseDate), 0)
def CharacterExcelAddReleaseDate(builder, ReleaseDate):
    """This method is deprecated. Please switch to AddReleaseDate."""
    return AddReleaseDate(builder, ReleaseDate)
def AddCollectionVisibleStartDate(builder, CollectionVisibleStartDate): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(CollectionVisibleStartDate), 0)
def CharacterExcelAddCollectionVisibleStartDate(builder, CollectionVisibleStartDate):
    """This method is deprecated. Please switch to AddCollectionVisibleStartDate."""
    return AddCollectionVisibleStartDate(builder, CollectionVisibleStartDate)
def AddCollectionVisibleEndDate(builder, CollectionVisibleEndDate): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(CollectionVisibleEndDate), 0)
def CharacterExcelAddCollectionVisibleEndDate(builder, CollectionVisibleEndDate):
    """This method is deprecated. Please switch to AddCollectionVisibleEndDate."""
    return AddCollectionVisibleEndDate(builder, CollectionVisibleEndDate)
def AddIsPlayableCharacter(builder, IsPlayableCharacter): builder.PrependBoolSlot(9, IsPlayableCharacter, 0)
def CharacterExcelAddIsPlayableCharacter(builder, IsPlayableCharacter):
    """This method is deprecated. Please switch to AddIsPlayableCharacter."""
    return AddIsPlayableCharacter(builder, IsPlayableCharacter)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(10, LocalizeEtcId, 0)
def CharacterExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddRarity_(builder, Rarity_): builder.PrependInt32Slot(11, Rarity_, 0)
def CharacterExcelAddRarity_(builder, Rarity_):
    """This method is deprecated. Please switch to AddRarity_."""
    return AddRarity_(builder, Rarity_)
def AddIsNPC(builder, IsNPC): builder.PrependBoolSlot(12, IsNPC, 0)
def CharacterExcelAddIsNPC(builder, IsNPC):
    """This method is deprecated. Please switch to AddIsNPC."""
    return AddIsNPC(builder, IsNPC)
def AddTacticEntityType_(builder, TacticEntityType_): builder.PrependInt32Slot(13, TacticEntityType_, 0)
def CharacterExcelAddTacticEntityType_(builder, TacticEntityType_):
    """This method is deprecated. Please switch to AddTacticEntityType_."""
    return AddTacticEntityType_(builder, TacticEntityType_)
def AddCanSurvive(builder, CanSurvive): builder.PrependBoolSlot(14, CanSurvive, 0)
def CharacterExcelAddCanSurvive(builder, CanSurvive):
    """This method is deprecated. Please switch to AddCanSurvive."""
    return AddCanSurvive(builder, CanSurvive)
def AddIsDummy(builder, IsDummy): builder.PrependBoolSlot(15, IsDummy, 0)
def CharacterExcelAddIsDummy(builder, IsDummy):
    """This method is deprecated. Please switch to AddIsDummy."""
    return AddIsDummy(builder, IsDummy)
def AddSubPartsCount(builder, SubPartsCount): builder.PrependInt32Slot(16, SubPartsCount, 0)
def CharacterExcelAddSubPartsCount(builder, SubPartsCount):
    """This method is deprecated. Please switch to AddSubPartsCount."""
    return AddSubPartsCount(builder, SubPartsCount)
def AddTacticRole_(builder, TacticRole_): builder.PrependInt32Slot(17, TacticRole_, 0)
def CharacterExcelAddTacticRole_(builder, TacticRole_):
    """This method is deprecated. Please switch to AddTacticRole_."""
    return AddTacticRole_(builder, TacticRole_)
def AddWeaponType_(builder, WeaponType_): builder.PrependInt32Slot(18, WeaponType_, 0)
def CharacterExcelAddWeaponType_(builder, WeaponType_):
    """This method is deprecated. Please switch to AddWeaponType_."""
    return AddWeaponType_(builder, WeaponType_)
def AddTacticRange_(builder, TacticRange_): builder.PrependInt32Slot(19, TacticRange_, 0)
def CharacterExcelAddTacticRange_(builder, TacticRange_):
    """This method is deprecated. Please switch to AddTacticRange_."""
    return AddTacticRange_(builder, TacticRange_)
def AddBulletType_(builder, BulletType_): builder.PrependInt32Slot(20, BulletType_, 0)
def CharacterExcelAddBulletType_(builder, BulletType_):
    """This method is deprecated. Please switch to AddBulletType_."""
    return AddBulletType_(builder, BulletType_)
def AddArmorType_(builder, ArmorType_): builder.PrependInt32Slot(21, ArmorType_, 0)
def CharacterExcelAddArmorType_(builder, ArmorType_):
    """This method is deprecated. Please switch to AddArmorType_."""
    return AddArmorType_(builder, ArmorType_)
def AddAimIKType_(builder, AimIKType_): builder.PrependInt32Slot(22, AimIKType_, 0)
def CharacterExcelAddAimIKType_(builder, AimIKType_):
    """This method is deprecated. Please switch to AddAimIKType_."""
    return AddAimIKType_(builder, AimIKType_)
def AddSchool_(builder, School_): builder.PrependInt32Slot(23, School_, 0)
def CharacterExcelAddSchool_(builder, School_):
    """This method is deprecated. Please switch to AddSchool_."""
    return AddSchool_(builder, School_)
def AddClub_(builder, Club_): builder.PrependInt32Slot(24, Club_, 0)
def CharacterExcelAddClub_(builder, Club_):
    """This method is deprecated. Please switch to AddClub_."""
    return AddClub_(builder, Club_)
def AddDefaultStarGrade(builder, DefaultStarGrade): builder.PrependInt32Slot(25, DefaultStarGrade, 0)
def CharacterExcelAddDefaultStarGrade(builder, DefaultStarGrade):
    """This method is deprecated. Please switch to AddDefaultStarGrade."""
    return AddDefaultStarGrade(builder, DefaultStarGrade)
def AddMaxStarGrade(builder, MaxStarGrade): builder.PrependInt32Slot(26, MaxStarGrade, 0)
def CharacterExcelAddMaxStarGrade(builder, MaxStarGrade):
    """This method is deprecated. Please switch to AddMaxStarGrade."""
    return AddMaxStarGrade(builder, MaxStarGrade)
def AddStatLevelUpType_(builder, StatLevelUpType_): builder.PrependInt32Slot(27, StatLevelUpType_, 0)
def CharacterExcelAddStatLevelUpType_(builder, StatLevelUpType_):
    """This method is deprecated. Please switch to AddStatLevelUpType_."""
    return AddStatLevelUpType_(builder, StatLevelUpType_)
def AddSquadType_(builder, SquadType_): builder.PrependInt32Slot(28, SquadType_, 0)
def CharacterExcelAddSquadType_(builder, SquadType_):
    """This method is deprecated. Please switch to AddSquadType_."""
    return AddSquadType_(builder, SquadType_)
def AddJumpable(builder, Jumpable): builder.PrependBoolSlot(29, Jumpable, 0)
def CharacterExcelAddJumpable(builder, Jumpable):
    """This method is deprecated. Please switch to AddJumpable."""
    return AddJumpable(builder, Jumpable)
def AddPersonalityId(builder, PersonalityId): builder.PrependInt64Slot(30, PersonalityId, 0)
def CharacterExcelAddPersonalityId(builder, PersonalityId):
    """This method is deprecated. Please switch to AddPersonalityId."""
    return AddPersonalityId(builder, PersonalityId)
def AddCharacterAIId(builder, CharacterAIId): builder.PrependInt64Slot(31, CharacterAIId, 0)
def CharacterExcelAddCharacterAIId(builder, CharacterAIId):
    """This method is deprecated. Please switch to AddCharacterAIId."""
    return AddCharacterAIId(builder, CharacterAIId)
def AddExternalBTId(builder, ExternalBTId): builder.PrependInt64Slot(32, ExternalBTId, 0)
def CharacterExcelAddExternalBTId(builder, ExternalBTId):
    """This method is deprecated. Please switch to AddExternalBTId."""
    return AddExternalBTId(builder, ExternalBTId)
def AddMainCombatStyleId(builder, MainCombatStyleId): builder.PrependInt64Slot(33, MainCombatStyleId, 0)
def CharacterExcelAddMainCombatStyleId(builder, MainCombatStyleId):
    """This method is deprecated. Please switch to AddMainCombatStyleId."""
    return AddMainCombatStyleId(builder, MainCombatStyleId)
def AddCombatStyleIndex(builder, CombatStyleIndex): builder.PrependInt32Slot(34, CombatStyleIndex, 0)
def CharacterExcelAddCombatStyleIndex(builder, CombatStyleIndex):
    """This method is deprecated. Please switch to AddCombatStyleIndex."""
    return AddCombatStyleIndex(builder, CombatStyleIndex)
def AddScenarioCharacter(builder, ScenarioCharacter): builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(ScenarioCharacter), 0)
def CharacterExcelAddScenarioCharacter(builder, ScenarioCharacter):
    """This method is deprecated. Please switch to AddScenarioCharacter."""
    return AddScenarioCharacter(builder, ScenarioCharacter)
def AddSpawnTemplateId(builder, SpawnTemplateId): builder.PrependUint32Slot(36, SpawnTemplateId, 0)
def CharacterExcelAddSpawnTemplateId(builder, SpawnTemplateId):
    """This method is deprecated. Please switch to AddSpawnTemplateId."""
    return AddSpawnTemplateId(builder, SpawnTemplateId)
def AddFavorLevelupType(builder, FavorLevelupType): builder.PrependInt32Slot(37, FavorLevelupType, 0)
def CharacterExcelAddFavorLevelupType(builder, FavorLevelupType):
    """This method is deprecated. Please switch to AddFavorLevelupType."""
    return AddFavorLevelupType(builder, FavorLevelupType)
def AddEquipmentSlot(builder, EquipmentSlot): builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(EquipmentSlot), 0)
def CharacterExcelAddEquipmentSlot(builder, EquipmentSlot):
    """This method is deprecated. Please switch to AddEquipmentSlot."""
    return AddEquipmentSlot(builder, EquipmentSlot)
def StartEquipmentSlotVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterExcelStartEquipmentSlotVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartEquipmentSlotVector(builder, numElems)
def AddWeaponLocalizeId(builder, WeaponLocalizeId): builder.PrependUint32Slot(39, WeaponLocalizeId, 0)
def CharacterExcelAddWeaponLocalizeId(builder, WeaponLocalizeId):
    """This method is deprecated. Please switch to AddWeaponLocalizeId."""
    return AddWeaponLocalizeId(builder, WeaponLocalizeId)
def AddDisplayEnemyInfo(builder, DisplayEnemyInfo): builder.PrependBoolSlot(40, DisplayEnemyInfo, 0)
def CharacterExcelAddDisplayEnemyInfo(builder, DisplayEnemyInfo):
    """This method is deprecated. Please switch to AddDisplayEnemyInfo."""
    return AddDisplayEnemyInfo(builder, DisplayEnemyInfo)
def AddBodyRadius(builder, BodyRadius): builder.PrependInt64Slot(41, BodyRadius, 0)
def CharacterExcelAddBodyRadius(builder, BodyRadius):
    """This method is deprecated. Please switch to AddBodyRadius."""
    return AddBodyRadius(builder, BodyRadius)
def AddRandomEffectRadius(builder, RandomEffectRadius): builder.PrependInt64Slot(42, RandomEffectRadius, 0)
def CharacterExcelAddRandomEffectRadius(builder, RandomEffectRadius):
    """This method is deprecated. Please switch to AddRandomEffectRadius."""
    return AddRandomEffectRadius(builder, RandomEffectRadius)
def AddHPBarHide(builder, HPBarHide): builder.PrependBoolSlot(43, HPBarHide, 0)
def CharacterExcelAddHPBarHide(builder, HPBarHide):
    """This method is deprecated. Please switch to AddHPBarHide."""
    return AddHPBarHide(builder, HPBarHide)
def AddHpBarHeight(builder, HpBarHeight): builder.PrependFloat32Slot(44, HpBarHeight, 0.0)
def CharacterExcelAddHpBarHeight(builder, HpBarHeight):
    """This method is deprecated. Please switch to AddHpBarHeight."""
    return AddHpBarHeight(builder, HpBarHeight)
def AddHighlightFloaterHeight(builder, HighlightFloaterHeight): builder.PrependFloat32Slot(45, HighlightFloaterHeight, 0.0)
def CharacterExcelAddHighlightFloaterHeight(builder, HighlightFloaterHeight):
    """This method is deprecated. Please switch to AddHighlightFloaterHeight."""
    return AddHighlightFloaterHeight(builder, HighlightFloaterHeight)
def AddEmojiOffsetX(builder, EmojiOffsetX): builder.PrependFloat32Slot(46, EmojiOffsetX, 0.0)
def CharacterExcelAddEmojiOffsetX(builder, EmojiOffsetX):
    """This method is deprecated. Please switch to AddEmojiOffsetX."""
    return AddEmojiOffsetX(builder, EmojiOffsetX)
def AddEmojiOffsetY(builder, EmojiOffsetY): builder.PrependFloat32Slot(47, EmojiOffsetY, 0.0)
def CharacterExcelAddEmojiOffsetY(builder, EmojiOffsetY):
    """This method is deprecated. Please switch to AddEmojiOffsetY."""
    return AddEmojiOffsetY(builder, EmojiOffsetY)
def AddMoveStartFrame(builder, MoveStartFrame): builder.PrependInt32Slot(48, MoveStartFrame, 0)
def CharacterExcelAddMoveStartFrame(builder, MoveStartFrame):
    """This method is deprecated. Please switch to AddMoveStartFrame."""
    return AddMoveStartFrame(builder, MoveStartFrame)
def AddMoveEndFrame(builder, MoveEndFrame): builder.PrependInt32Slot(49, MoveEndFrame, 0)
def CharacterExcelAddMoveEndFrame(builder, MoveEndFrame):
    """This method is deprecated. Please switch to AddMoveEndFrame."""
    return AddMoveEndFrame(builder, MoveEndFrame)
def AddJumpMotionFrame(builder, JumpMotionFrame): builder.PrependInt32Slot(50, JumpMotionFrame, 0)
def CharacterExcelAddJumpMotionFrame(builder, JumpMotionFrame):
    """This method is deprecated. Please switch to AddJumpMotionFrame."""
    return AddJumpMotionFrame(builder, JumpMotionFrame)
def AddAppearFrame(builder, AppearFrame): builder.PrependInt32Slot(51, AppearFrame, 0)
def CharacterExcelAddAppearFrame(builder, AppearFrame):
    """This method is deprecated. Please switch to AddAppearFrame."""
    return AddAppearFrame(builder, AppearFrame)
def AddCanMove(builder, CanMove): builder.PrependBoolSlot(52, CanMove, 0)
def CharacterExcelAddCanMove(builder, CanMove):
    """This method is deprecated. Please switch to AddCanMove."""
    return AddCanMove(builder, CanMove)
def AddCanFix(builder, CanFix): builder.PrependBoolSlot(53, CanFix, 0)
def CharacterExcelAddCanFix(builder, CanFix):
    """This method is deprecated. Please switch to AddCanFix."""
    return AddCanFix(builder, CanFix)
def AddCanCrowdControl(builder, CanCrowdControl): builder.PrependBoolSlot(54, CanCrowdControl, 0)
def CharacterExcelAddCanCrowdControl(builder, CanCrowdControl):
    """This method is deprecated. Please switch to AddCanCrowdControl."""
    return AddCanCrowdControl(builder, CanCrowdControl)
def AddCanBattleItemMove(builder, CanBattleItemMove): builder.PrependBoolSlot(55, CanBattleItemMove, 0)
def CharacterExcelAddCanBattleItemMove(builder, CanBattleItemMove):
    """This method is deprecated. Please switch to AddCanBattleItemMove."""
    return AddCanBattleItemMove(builder, CanBattleItemMove)
def AddIsAirUnit(builder, IsAirUnit): builder.PrependBoolSlot(56, IsAirUnit, 0)
def CharacterExcelAddIsAirUnit(builder, IsAirUnit):
    """This method is deprecated. Please switch to AddIsAirUnit."""
    return AddIsAirUnit(builder, IsAirUnit)
def AddAirUnitHeight(builder, AirUnitHeight): builder.PrependInt64Slot(57, AirUnitHeight, 0)
def CharacterExcelAddAirUnitHeight(builder, AirUnitHeight):
    """This method is deprecated. Please switch to AddAirUnitHeight."""
    return AddAirUnitHeight(builder, AirUnitHeight)
def AddTags(builder, Tags): builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(Tags), 0)
def CharacterExcelAddTags(builder, Tags):
    """This method is deprecated. Please switch to AddTags."""
    return AddTags(builder, Tags)
def StartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterExcelStartTagsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTagsVector(builder, numElems)
def AddSecretStoneItemId(builder, SecretStoneItemId): builder.PrependInt64Slot(59, SecretStoneItemId, 0)
def CharacterExcelAddSecretStoneItemId(builder, SecretStoneItemId):
    """This method is deprecated. Please switch to AddSecretStoneItemId."""
    return AddSecretStoneItemId(builder, SecretStoneItemId)
def AddSecretStoneItemAmount(builder, SecretStoneItemAmount): builder.PrependInt32Slot(60, SecretStoneItemAmount, 0)
def CharacterExcelAddSecretStoneItemAmount(builder, SecretStoneItemAmount):
    """This method is deprecated. Please switch to AddSecretStoneItemAmount."""
    return AddSecretStoneItemAmount(builder, SecretStoneItemAmount)
def AddCharacterPieceItemId(builder, CharacterPieceItemId): builder.PrependInt64Slot(61, CharacterPieceItemId, 0)
def CharacterExcelAddCharacterPieceItemId(builder, CharacterPieceItemId):
    """This method is deprecated. Please switch to AddCharacterPieceItemId."""
    return AddCharacterPieceItemId(builder, CharacterPieceItemId)
def AddCharacterPieceItemAmount(builder, CharacterPieceItemAmount): builder.PrependInt32Slot(62, CharacterPieceItemAmount, 0)
def CharacterExcelAddCharacterPieceItemAmount(builder, CharacterPieceItemAmount):
    """This method is deprecated. Please switch to AddCharacterPieceItemAmount."""
    return AddCharacterPieceItemAmount(builder, CharacterPieceItemAmount)
def AddCombineRecipeId(builder, CombineRecipeId): builder.PrependInt64Slot(63, CombineRecipeId, 0)
def CharacterExcelAddCombineRecipeId(builder, CombineRecipeId):
    """This method is deprecated. Please switch to AddCombineRecipeId."""
    return AddCombineRecipeId(builder, CombineRecipeId)
def End(builder): return builder.EndObject()
def CharacterExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
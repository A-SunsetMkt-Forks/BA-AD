# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterStatExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StabilityPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AttackPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MaxHP100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealPower100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DodgePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AccuracyPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalResistPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def CriticalDamageResistRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def BlockRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealEffectivenessRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OppressionResist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetration100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DefensePenetrationResist100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceExplosionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhancePierceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceMysticRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSonicRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceSiegeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceStructureRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendBuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendDebuffDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExtendCrowdControlDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def AmmoCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IgnoreDelayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def NormalAttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def Range(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def InitialRangeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def SightPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActiveGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyGauge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def GroggyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategyMobility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ActionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StrategySightRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamageRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Increase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def DamagedRatio2Decrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioIncrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ExDamagedRatioDecrease(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def EnhanceExDamageRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def ReduceExDamagedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealLightArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealHeavyArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealUnarmedRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealElasticArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealNormalArmorRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedExplosionRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedPierceRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedMysticRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedSonicRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def HealedNormalRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def StreetBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def OutdoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def IndoorBattleAdaptation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterStatExcel
    def RegenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(79)
def CharacterStatExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(0, CharacterId, 0)
def CharacterStatExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddStabilityRate(builder, StabilityRate): builder.PrependInt64Slot(1, StabilityRate, 0)
def CharacterStatExcelAddStabilityRate(builder, StabilityRate):
    """This method is deprecated. Please switch to AddStabilityRate."""
    return AddStabilityRate(builder, StabilityRate)
def AddStabilityPoint(builder, StabilityPoint): builder.PrependInt64Slot(2, StabilityPoint, 0)
def CharacterStatExcelAddStabilityPoint(builder, StabilityPoint):
    """This method is deprecated. Please switch to AddStabilityPoint."""
    return AddStabilityPoint(builder, StabilityPoint)
def AddAttackPower1(builder, AttackPower1): builder.PrependInt64Slot(3, AttackPower1, 0)
def CharacterStatExcelAddAttackPower1(builder, AttackPower1):
    """This method is deprecated. Please switch to AddAttackPower1."""
    return AddAttackPower1(builder, AttackPower1)
def AddAttackPower100(builder, AttackPower100): builder.PrependInt64Slot(4, AttackPower100, 0)
def CharacterStatExcelAddAttackPower100(builder, AttackPower100):
    """This method is deprecated. Please switch to AddAttackPower100."""
    return AddAttackPower100(builder, AttackPower100)
def AddMaxHP1(builder, MaxHP1): builder.PrependInt64Slot(5, MaxHP1, 0)
def CharacterStatExcelAddMaxHP1(builder, MaxHP1):
    """This method is deprecated. Please switch to AddMaxHP1."""
    return AddMaxHP1(builder, MaxHP1)
def AddMaxHP100(builder, MaxHP100): builder.PrependInt64Slot(6, MaxHP100, 0)
def CharacterStatExcelAddMaxHP100(builder, MaxHP100):
    """This method is deprecated. Please switch to AddMaxHP100."""
    return AddMaxHP100(builder, MaxHP100)
def AddDefensePower1(builder, DefensePower1): builder.PrependInt64Slot(7, DefensePower1, 0)
def CharacterStatExcelAddDefensePower1(builder, DefensePower1):
    """This method is deprecated. Please switch to AddDefensePower1."""
    return AddDefensePower1(builder, DefensePower1)
def AddDefensePower100(builder, DefensePower100): builder.PrependInt64Slot(8, DefensePower100, 0)
def CharacterStatExcelAddDefensePower100(builder, DefensePower100):
    """This method is deprecated. Please switch to AddDefensePower100."""
    return AddDefensePower100(builder, DefensePower100)
def AddHealPower1(builder, HealPower1): builder.PrependInt64Slot(9, HealPower1, 0)
def CharacterStatExcelAddHealPower1(builder, HealPower1):
    """This method is deprecated. Please switch to AddHealPower1."""
    return AddHealPower1(builder, HealPower1)
def AddHealPower100(builder, HealPower100): builder.PrependInt64Slot(10, HealPower100, 0)
def CharacterStatExcelAddHealPower100(builder, HealPower100):
    """This method is deprecated. Please switch to AddHealPower100."""
    return AddHealPower100(builder, HealPower100)
def AddDodgePoint(builder, DodgePoint): builder.PrependInt64Slot(11, DodgePoint, 0)
def CharacterStatExcelAddDodgePoint(builder, DodgePoint):
    """This method is deprecated. Please switch to AddDodgePoint."""
    return AddDodgePoint(builder, DodgePoint)
def AddAccuracyPoint(builder, AccuracyPoint): builder.PrependInt64Slot(12, AccuracyPoint, 0)
def CharacterStatExcelAddAccuracyPoint(builder, AccuracyPoint):
    """This method is deprecated. Please switch to AddAccuracyPoint."""
    return AddAccuracyPoint(builder, AccuracyPoint)
def AddCriticalPoint(builder, CriticalPoint): builder.PrependInt64Slot(13, CriticalPoint, 0)
def CharacterStatExcelAddCriticalPoint(builder, CriticalPoint):
    """This method is deprecated. Please switch to AddCriticalPoint."""
    return AddCriticalPoint(builder, CriticalPoint)
def AddCriticalResistPoint(builder, CriticalResistPoint): builder.PrependInt64Slot(14, CriticalResistPoint, 0)
def CharacterStatExcelAddCriticalResistPoint(builder, CriticalResistPoint):
    """This method is deprecated. Please switch to AddCriticalResistPoint."""
    return AddCriticalResistPoint(builder, CriticalResistPoint)
def AddCriticalDamageRate(builder, CriticalDamageRate): builder.PrependInt64Slot(15, CriticalDamageRate, 0)
def CharacterStatExcelAddCriticalDamageRate(builder, CriticalDamageRate):
    """This method is deprecated. Please switch to AddCriticalDamageRate."""
    return AddCriticalDamageRate(builder, CriticalDamageRate)
def AddCriticalDamageResistRate(builder, CriticalDamageResistRate): builder.PrependInt64Slot(16, CriticalDamageResistRate, 0)
def CharacterStatExcelAddCriticalDamageResistRate(builder, CriticalDamageResistRate):
    """This method is deprecated. Please switch to AddCriticalDamageResistRate."""
    return AddCriticalDamageResistRate(builder, CriticalDamageResistRate)
def AddBlockRate(builder, BlockRate): builder.PrependInt64Slot(17, BlockRate, 0)
def CharacterStatExcelAddBlockRate(builder, BlockRate):
    """This method is deprecated. Please switch to AddBlockRate."""
    return AddBlockRate(builder, BlockRate)
def AddHealEffectivenessRate(builder, HealEffectivenessRate): builder.PrependInt64Slot(18, HealEffectivenessRate, 0)
def CharacterStatExcelAddHealEffectivenessRate(builder, HealEffectivenessRate):
    """This method is deprecated. Please switch to AddHealEffectivenessRate."""
    return AddHealEffectivenessRate(builder, HealEffectivenessRate)
def AddOppressionPower(builder, OppressionPower): builder.PrependInt64Slot(19, OppressionPower, 0)
def CharacterStatExcelAddOppressionPower(builder, OppressionPower):
    """This method is deprecated. Please switch to AddOppressionPower."""
    return AddOppressionPower(builder, OppressionPower)
def AddOppressionResist(builder, OppressionResist): builder.PrependInt64Slot(20, OppressionResist, 0)
def CharacterStatExcelAddOppressionResist(builder, OppressionResist):
    """This method is deprecated. Please switch to AddOppressionResist."""
    return AddOppressionResist(builder, OppressionResist)
def AddDefensePenetration1(builder, DefensePenetration1): builder.PrependInt64Slot(21, DefensePenetration1, 0)
def CharacterStatExcelAddDefensePenetration1(builder, DefensePenetration1):
    """This method is deprecated. Please switch to AddDefensePenetration1."""
    return AddDefensePenetration1(builder, DefensePenetration1)
def AddDefensePenetration100(builder, DefensePenetration100): builder.PrependInt64Slot(22, DefensePenetration100, 0)
def CharacterStatExcelAddDefensePenetration100(builder, DefensePenetration100):
    """This method is deprecated. Please switch to AddDefensePenetration100."""
    return AddDefensePenetration100(builder, DefensePenetration100)
def AddDefensePenetrationResist1(builder, DefensePenetrationResist1): builder.PrependInt64Slot(23, DefensePenetrationResist1, 0)
def CharacterStatExcelAddDefensePenetrationResist1(builder, DefensePenetrationResist1):
    """This method is deprecated. Please switch to AddDefensePenetrationResist1."""
    return AddDefensePenetrationResist1(builder, DefensePenetrationResist1)
def AddDefensePenetrationResist100(builder, DefensePenetrationResist100): builder.PrependInt64Slot(24, DefensePenetrationResist100, 0)
def CharacterStatExcelAddDefensePenetrationResist100(builder, DefensePenetrationResist100):
    """This method is deprecated. Please switch to AddDefensePenetrationResist100."""
    return AddDefensePenetrationResist100(builder, DefensePenetrationResist100)
def AddEnhanceExplosionRate(builder, EnhanceExplosionRate): builder.PrependInt64Slot(25, EnhanceExplosionRate, 0)
def CharacterStatExcelAddEnhanceExplosionRate(builder, EnhanceExplosionRate):
    """This method is deprecated. Please switch to AddEnhanceExplosionRate."""
    return AddEnhanceExplosionRate(builder, EnhanceExplosionRate)
def AddEnhancePierceRate(builder, EnhancePierceRate): builder.PrependInt64Slot(26, EnhancePierceRate, 0)
def CharacterStatExcelAddEnhancePierceRate(builder, EnhancePierceRate):
    """This method is deprecated. Please switch to AddEnhancePierceRate."""
    return AddEnhancePierceRate(builder, EnhancePierceRate)
def AddEnhanceMysticRate(builder, EnhanceMysticRate): builder.PrependInt64Slot(27, EnhanceMysticRate, 0)
def CharacterStatExcelAddEnhanceMysticRate(builder, EnhanceMysticRate):
    """This method is deprecated. Please switch to AddEnhanceMysticRate."""
    return AddEnhanceMysticRate(builder, EnhanceMysticRate)
def AddEnhanceSonicRate(builder, EnhanceSonicRate): builder.PrependInt64Slot(28, EnhanceSonicRate, 0)
def CharacterStatExcelAddEnhanceSonicRate(builder, EnhanceSonicRate):
    """This method is deprecated. Please switch to AddEnhanceSonicRate."""
    return AddEnhanceSonicRate(builder, EnhanceSonicRate)
def AddEnhanceSiegeRate(builder, EnhanceSiegeRate): builder.PrependInt64Slot(29, EnhanceSiegeRate, 0)
def CharacterStatExcelAddEnhanceSiegeRate(builder, EnhanceSiegeRate):
    """This method is deprecated. Please switch to AddEnhanceSiegeRate."""
    return AddEnhanceSiegeRate(builder, EnhanceSiegeRate)
def AddEnhanceNormalRate(builder, EnhanceNormalRate): builder.PrependInt64Slot(30, EnhanceNormalRate, 0)
def CharacterStatExcelAddEnhanceNormalRate(builder, EnhanceNormalRate):
    """This method is deprecated. Please switch to AddEnhanceNormalRate."""
    return AddEnhanceNormalRate(builder, EnhanceNormalRate)
def AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate): builder.PrependInt64Slot(31, EnhanceLightArmorRate, 0)
def CharacterStatExcelAddEnhanceLightArmorRate(builder, EnhanceLightArmorRate):
    """This method is deprecated. Please switch to AddEnhanceLightArmorRate."""
    return AddEnhanceLightArmorRate(builder, EnhanceLightArmorRate)
def AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate): builder.PrependInt64Slot(32, EnhanceHeavyArmorRate, 0)
def CharacterStatExcelAddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate):
    """This method is deprecated. Please switch to AddEnhanceHeavyArmorRate."""
    return AddEnhanceHeavyArmorRate(builder, EnhanceHeavyArmorRate)
def AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate): builder.PrependInt64Slot(33, EnhanceUnarmedRate, 0)
def CharacterStatExcelAddEnhanceUnarmedRate(builder, EnhanceUnarmedRate):
    """This method is deprecated. Please switch to AddEnhanceUnarmedRate."""
    return AddEnhanceUnarmedRate(builder, EnhanceUnarmedRate)
def AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate): builder.PrependInt64Slot(34, EnhanceElasticArmorRate, 0)
def CharacterStatExcelAddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate):
    """This method is deprecated. Please switch to AddEnhanceElasticArmorRate."""
    return AddEnhanceElasticArmorRate(builder, EnhanceElasticArmorRate)
def AddEnhanceStructureRate(builder, EnhanceStructureRate): builder.PrependInt64Slot(35, EnhanceStructureRate, 0)
def CharacterStatExcelAddEnhanceStructureRate(builder, EnhanceStructureRate):
    """This method is deprecated. Please switch to AddEnhanceStructureRate."""
    return AddEnhanceStructureRate(builder, EnhanceStructureRate)
def AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate): builder.PrependInt64Slot(36, EnhanceNormalArmorRate, 0)
def CharacterStatExcelAddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate):
    """This method is deprecated. Please switch to AddEnhanceNormalArmorRate."""
    return AddEnhanceNormalArmorRate(builder, EnhanceNormalArmorRate)
def AddExtendBuffDuration(builder, ExtendBuffDuration): builder.PrependInt64Slot(37, ExtendBuffDuration, 0)
def CharacterStatExcelAddExtendBuffDuration(builder, ExtendBuffDuration):
    """This method is deprecated. Please switch to AddExtendBuffDuration."""
    return AddExtendBuffDuration(builder, ExtendBuffDuration)
def AddExtendDebuffDuration(builder, ExtendDebuffDuration): builder.PrependInt64Slot(38, ExtendDebuffDuration, 0)
def CharacterStatExcelAddExtendDebuffDuration(builder, ExtendDebuffDuration):
    """This method is deprecated. Please switch to AddExtendDebuffDuration."""
    return AddExtendDebuffDuration(builder, ExtendDebuffDuration)
def AddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration): builder.PrependInt64Slot(39, ExtendCrowdControlDuration, 0)
def CharacterStatExcelAddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration):
    """This method is deprecated. Please switch to AddExtendCrowdControlDuration."""
    return AddExtendCrowdControlDuration(builder, ExtendCrowdControlDuration)
def AddAmmoCount(builder, AmmoCount): builder.PrependInt64Slot(40, AmmoCount, 0)
def CharacterStatExcelAddAmmoCount(builder, AmmoCount):
    """This method is deprecated. Please switch to AddAmmoCount."""
    return AddAmmoCount(builder, AmmoCount)
def AddAmmoCost(builder, AmmoCost): builder.PrependInt64Slot(41, AmmoCost, 0)
def CharacterStatExcelAddAmmoCost(builder, AmmoCost):
    """This method is deprecated. Please switch to AddAmmoCost."""
    return AddAmmoCost(builder, AmmoCost)
def AddIgnoreDelayCount(builder, IgnoreDelayCount): builder.PrependInt64Slot(42, IgnoreDelayCount, 0)
def CharacterStatExcelAddIgnoreDelayCount(builder, IgnoreDelayCount):
    """This method is deprecated. Please switch to AddIgnoreDelayCount."""
    return AddIgnoreDelayCount(builder, IgnoreDelayCount)
def AddNormalAttackSpeed(builder, NormalAttackSpeed): builder.PrependInt64Slot(43, NormalAttackSpeed, 0)
def CharacterStatExcelAddNormalAttackSpeed(builder, NormalAttackSpeed):
    """This method is deprecated. Please switch to AddNormalAttackSpeed."""
    return AddNormalAttackSpeed(builder, NormalAttackSpeed)
def AddRange(builder, Range): builder.PrependInt64Slot(44, Range, 0)
def CharacterStatExcelAddRange(builder, Range):
    """This method is deprecated. Please switch to AddRange."""
    return AddRange(builder, Range)
def AddInitialRangeRate(builder, InitialRangeRate): builder.PrependInt64Slot(45, InitialRangeRate, 0)
def CharacterStatExcelAddInitialRangeRate(builder, InitialRangeRate):
    """This method is deprecated. Please switch to AddInitialRangeRate."""
    return AddInitialRangeRate(builder, InitialRangeRate)
def AddMoveSpeed(builder, MoveSpeed): builder.PrependInt64Slot(46, MoveSpeed, 0)
def CharacterStatExcelAddMoveSpeed(builder, MoveSpeed):
    """This method is deprecated. Please switch to AddMoveSpeed."""
    return AddMoveSpeed(builder, MoveSpeed)
def AddSightPoint(builder, SightPoint): builder.PrependInt64Slot(47, SightPoint, 0)
def CharacterStatExcelAddSightPoint(builder, SightPoint):
    """This method is deprecated. Please switch to AddSightPoint."""
    return AddSightPoint(builder, SightPoint)
def AddActiveGauge(builder, ActiveGauge): builder.PrependInt64Slot(48, ActiveGauge, 0)
def CharacterStatExcelAddActiveGauge(builder, ActiveGauge):
    """This method is deprecated. Please switch to AddActiveGauge."""
    return AddActiveGauge(builder, ActiveGauge)
def AddGroggyGauge(builder, GroggyGauge): builder.PrependInt32Slot(49, GroggyGauge, 0)
def CharacterStatExcelAddGroggyGauge(builder, GroggyGauge):
    """This method is deprecated. Please switch to AddGroggyGauge."""
    return AddGroggyGauge(builder, GroggyGauge)
def AddGroggyTime(builder, GroggyTime): builder.PrependInt32Slot(50, GroggyTime, 0)
def CharacterStatExcelAddGroggyTime(builder, GroggyTime):
    """This method is deprecated. Please switch to AddGroggyTime."""
    return AddGroggyTime(builder, GroggyTime)
def AddStrategyMobility(builder, StrategyMobility): builder.PrependInt64Slot(51, StrategyMobility, 0)
def CharacterStatExcelAddStrategyMobility(builder, StrategyMobility):
    """This method is deprecated. Please switch to AddStrategyMobility."""
    return AddStrategyMobility(builder, StrategyMobility)
def AddActionCount(builder, ActionCount): builder.PrependInt64Slot(52, ActionCount, 0)
def CharacterStatExcelAddActionCount(builder, ActionCount):
    """This method is deprecated. Please switch to AddActionCount."""
    return AddActionCount(builder, ActionCount)
def AddStrategySightRange(builder, StrategySightRange): builder.PrependInt64Slot(53, StrategySightRange, 0)
def CharacterStatExcelAddStrategySightRange(builder, StrategySightRange):
    """This method is deprecated. Please switch to AddStrategySightRange."""
    return AddStrategySightRange(builder, StrategySightRange)
def AddDamageRatio(builder, DamageRatio): builder.PrependInt64Slot(54, DamageRatio, 0)
def CharacterStatExcelAddDamageRatio(builder, DamageRatio):
    """This method is deprecated. Please switch to AddDamageRatio."""
    return AddDamageRatio(builder, DamageRatio)
def AddDamagedRatio(builder, DamagedRatio): builder.PrependInt64Slot(55, DamagedRatio, 0)
def CharacterStatExcelAddDamagedRatio(builder, DamagedRatio):
    """This method is deprecated. Please switch to AddDamagedRatio."""
    return AddDamagedRatio(builder, DamagedRatio)
def AddDamageRatio2Increase(builder, DamageRatio2Increase): builder.PrependInt64Slot(56, DamageRatio2Increase, 0)
def CharacterStatExcelAddDamageRatio2Increase(builder, DamageRatio2Increase):
    """This method is deprecated. Please switch to AddDamageRatio2Increase."""
    return AddDamageRatio2Increase(builder, DamageRatio2Increase)
def AddDamageRatio2Decrease(builder, DamageRatio2Decrease): builder.PrependInt64Slot(57, DamageRatio2Decrease, 0)
def CharacterStatExcelAddDamageRatio2Decrease(builder, DamageRatio2Decrease):
    """This method is deprecated. Please switch to AddDamageRatio2Decrease."""
    return AddDamageRatio2Decrease(builder, DamageRatio2Decrease)
def AddDamagedRatio2Increase(builder, DamagedRatio2Increase): builder.PrependInt64Slot(58, DamagedRatio2Increase, 0)
def CharacterStatExcelAddDamagedRatio2Increase(builder, DamagedRatio2Increase):
    """This method is deprecated. Please switch to AddDamagedRatio2Increase."""
    return AddDamagedRatio2Increase(builder, DamagedRatio2Increase)
def AddDamagedRatio2Decrease(builder, DamagedRatio2Decrease): builder.PrependInt64Slot(59, DamagedRatio2Decrease, 0)
def CharacterStatExcelAddDamagedRatio2Decrease(builder, DamagedRatio2Decrease):
    """This method is deprecated. Please switch to AddDamagedRatio2Decrease."""
    return AddDamagedRatio2Decrease(builder, DamagedRatio2Decrease)
def AddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease): builder.PrependInt64Slot(60, ExDamagedRatioIncrease, 0)
def CharacterStatExcelAddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease):
    """This method is deprecated. Please switch to AddExDamagedRatioIncrease."""
    return AddExDamagedRatioIncrease(builder, ExDamagedRatioIncrease)
def AddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease): builder.PrependInt64Slot(61, ExDamagedRatioDecrease, 0)
def CharacterStatExcelAddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease):
    """This method is deprecated. Please switch to AddExDamagedRatioDecrease."""
    return AddExDamagedRatioDecrease(builder, ExDamagedRatioDecrease)
def AddEnhanceExDamageRate(builder, EnhanceExDamageRate): builder.PrependInt64Slot(62, EnhanceExDamageRate, 0)
def CharacterStatExcelAddEnhanceExDamageRate(builder, EnhanceExDamageRate):
    """This method is deprecated. Please switch to AddEnhanceExDamageRate."""
    return AddEnhanceExDamageRate(builder, EnhanceExDamageRate)
def AddReduceExDamagedRate(builder, ReduceExDamagedRate): builder.PrependInt64Slot(63, ReduceExDamagedRate, 0)
def CharacterStatExcelAddReduceExDamagedRate(builder, ReduceExDamagedRate):
    """This method is deprecated. Please switch to AddReduceExDamagedRate."""
    return AddReduceExDamagedRate(builder, ReduceExDamagedRate)
def AddHealRate(builder, HealRate): builder.PrependInt64Slot(64, HealRate, 0)
def CharacterStatExcelAddHealRate(builder, HealRate):
    """This method is deprecated. Please switch to AddHealRate."""
    return AddHealRate(builder, HealRate)
def AddHealLightArmorRate(builder, HealLightArmorRate): builder.PrependInt64Slot(65, HealLightArmorRate, 0)
def CharacterStatExcelAddHealLightArmorRate(builder, HealLightArmorRate):
    """This method is deprecated. Please switch to AddHealLightArmorRate."""
    return AddHealLightArmorRate(builder, HealLightArmorRate)
def AddHealHeavyArmorRate(builder, HealHeavyArmorRate): builder.PrependInt64Slot(66, HealHeavyArmorRate, 0)
def CharacterStatExcelAddHealHeavyArmorRate(builder, HealHeavyArmorRate):
    """This method is deprecated. Please switch to AddHealHeavyArmorRate."""
    return AddHealHeavyArmorRate(builder, HealHeavyArmorRate)
def AddHealUnarmedRate(builder, HealUnarmedRate): builder.PrependInt64Slot(67, HealUnarmedRate, 0)
def CharacterStatExcelAddHealUnarmedRate(builder, HealUnarmedRate):
    """This method is deprecated. Please switch to AddHealUnarmedRate."""
    return AddHealUnarmedRate(builder, HealUnarmedRate)
def AddHealElasticArmorRate(builder, HealElasticArmorRate): builder.PrependInt64Slot(68, HealElasticArmorRate, 0)
def CharacterStatExcelAddHealElasticArmorRate(builder, HealElasticArmorRate):
    """This method is deprecated. Please switch to AddHealElasticArmorRate."""
    return AddHealElasticArmorRate(builder, HealElasticArmorRate)
def AddHealNormalArmorRate(builder, HealNormalArmorRate): builder.PrependInt64Slot(69, HealNormalArmorRate, 0)
def CharacterStatExcelAddHealNormalArmorRate(builder, HealNormalArmorRate):
    """This method is deprecated. Please switch to AddHealNormalArmorRate."""
    return AddHealNormalArmorRate(builder, HealNormalArmorRate)
def AddHealedExplosionRate(builder, HealedExplosionRate): builder.PrependInt64Slot(70, HealedExplosionRate, 0)
def CharacterStatExcelAddHealedExplosionRate(builder, HealedExplosionRate):
    """This method is deprecated. Please switch to AddHealedExplosionRate."""
    return AddHealedExplosionRate(builder, HealedExplosionRate)
def AddHealedPierceRate(builder, HealedPierceRate): builder.PrependInt64Slot(71, HealedPierceRate, 0)
def CharacterStatExcelAddHealedPierceRate(builder, HealedPierceRate):
    """This method is deprecated. Please switch to AddHealedPierceRate."""
    return AddHealedPierceRate(builder, HealedPierceRate)
def AddHealedMysticRate(builder, HealedMysticRate): builder.PrependInt64Slot(72, HealedMysticRate, 0)
def CharacterStatExcelAddHealedMysticRate(builder, HealedMysticRate):
    """This method is deprecated. Please switch to AddHealedMysticRate."""
    return AddHealedMysticRate(builder, HealedMysticRate)
def AddHealedSonicRate(builder, HealedSonicRate): builder.PrependInt64Slot(73, HealedSonicRate, 0)
def CharacterStatExcelAddHealedSonicRate(builder, HealedSonicRate):
    """This method is deprecated. Please switch to AddHealedSonicRate."""
    return AddHealedSonicRate(builder, HealedSonicRate)
def AddHealedNormalRate(builder, HealedNormalRate): builder.PrependInt64Slot(74, HealedNormalRate, 0)
def CharacterStatExcelAddHealedNormalRate(builder, HealedNormalRate):
    """This method is deprecated. Please switch to AddHealedNormalRate."""
    return AddHealedNormalRate(builder, HealedNormalRate)
def AddStreetBattleAdaptation(builder, StreetBattleAdaptation): builder.PrependInt32Slot(75, StreetBattleAdaptation, 0)
def CharacterStatExcelAddStreetBattleAdaptation(builder, StreetBattleAdaptation):
    """This method is deprecated. Please switch to AddStreetBattleAdaptation."""
    return AddStreetBattleAdaptation(builder, StreetBattleAdaptation)
def AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation): builder.PrependInt32Slot(76, OutdoorBattleAdaptation, 0)
def CharacterStatExcelAddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation):
    """This method is deprecated. Please switch to AddOutdoorBattleAdaptation."""
    return AddOutdoorBattleAdaptation(builder, OutdoorBattleAdaptation)
def AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation): builder.PrependInt32Slot(77, IndoorBattleAdaptation, 0)
def CharacterStatExcelAddIndoorBattleAdaptation(builder, IndoorBattleAdaptation):
    """This method is deprecated. Please switch to AddIndoorBattleAdaptation."""
    return AddIndoorBattleAdaptation(builder, IndoorBattleAdaptation)
def AddRegenCost(builder, RegenCost): builder.PrependInt64Slot(78, RegenCost, 0)
def CharacterStatExcelAddRegenCost(builder, RegenCost):
    """This method is deprecated. Please switch to AddRegenCost."""
    return AddRegenCost(builder, RegenCost)
def End(builder): return builder.EndObject()
def CharacterStatExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
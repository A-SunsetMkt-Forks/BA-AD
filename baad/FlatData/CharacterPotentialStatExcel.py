# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterPotentialStatExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterPotentialStatExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterPotentialStatExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterPotentialStatExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterPotentialStatExcel
    def PotentialStatGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def PotentialLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterPotentialStatExcel
    def StatBonusRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(4)
def CharacterPotentialStatExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddPotentialStatGroupId(builder, PotentialStatGroupId): builder.PrependInt64Slot(0, PotentialStatGroupId, 0)
def CharacterPotentialStatExcelAddPotentialStatGroupId(builder, PotentialStatGroupId):
    """This method is deprecated. Please switch to AddPotentialStatGroupId."""
    return AddPotentialStatGroupId(builder, PotentialStatGroupId)
def AddPotentialLevel(builder, PotentialLevel): builder.PrependInt32Slot(1, PotentialLevel, 0)
def CharacterPotentialStatExcelAddPotentialLevel(builder, PotentialLevel):
    """This method is deprecated. Please switch to AddPotentialLevel."""
    return AddPotentialLevel(builder, PotentialLevel)
def AddRecipeId(builder, RecipeId): builder.PrependInt64Slot(2, RecipeId, 0)
def CharacterPotentialStatExcelAddRecipeId(builder, RecipeId):
    """This method is deprecated. Please switch to AddRecipeId."""
    return AddRecipeId(builder, RecipeId)
def AddStatBonusRate(builder, StatBonusRate): builder.PrependInt64Slot(3, StatBonusRate, 0)
def CharacterPotentialStatExcelAddStatBonusRate(builder, StatBonusRate):
    """This method is deprecated. Please switch to AddStatBonusRate."""
    return AddStatBonusRate(builder, StatBonusRate)
def End(builder): return builder.EndObject()
def CharacterPotentialStatExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CharacterGearExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CharacterGearExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCharacterGearExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CharacterGearExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CharacterGearExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def CharacterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def StatLevelUpType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def Tier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def NextTierEquipment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def OpenFavorLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def MaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def LearnSkillSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterGearExcel
    def StatType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterGearExcel
    def StatTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterGearExcel
    def StatTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterGearExcel
    def StatTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # CharacterGearExcel
    def MinStatValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterGearExcel
    def MinStatValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterGearExcel
    def MinStatValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterGearExcel
    def MinStatValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # CharacterGearExcel
    def MaxStatValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # CharacterGearExcel
    def MaxStatValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # CharacterGearExcel
    def MaxStatValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterGearExcel
    def MaxStatValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # CharacterGearExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CharacterGearExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # CharacterGearExcel
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CharacterGearExcel
    def TagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CharacterGearExcel
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CharacterGearExcel
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def Start(builder): builder.StartObject(15)
def CharacterGearExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def CharacterGearExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddCharacterId(builder, CharacterId): builder.PrependInt64Slot(1, CharacterId, 0)
def CharacterGearExcelAddCharacterId(builder, CharacterId):
    """This method is deprecated. Please switch to AddCharacterId."""
    return AddCharacterId(builder, CharacterId)
def AddStatLevelUpType_(builder, StatLevelUpType_): builder.PrependInt32Slot(2, StatLevelUpType_, 0)
def CharacterGearExcelAddStatLevelUpType_(builder, StatLevelUpType_):
    """This method is deprecated. Please switch to AddStatLevelUpType_."""
    return AddStatLevelUpType_(builder, StatLevelUpType_)
def AddTier(builder, Tier): builder.PrependInt64Slot(3, Tier, 0)
def CharacterGearExcelAddTier(builder, Tier):
    """This method is deprecated. Please switch to AddTier."""
    return AddTier(builder, Tier)
def AddNextTierEquipment(builder, NextTierEquipment): builder.PrependInt64Slot(4, NextTierEquipment, 0)
def CharacterGearExcelAddNextTierEquipment(builder, NextTierEquipment):
    """This method is deprecated. Please switch to AddNextTierEquipment."""
    return AddNextTierEquipment(builder, NextTierEquipment)
def AddRecipeId(builder, RecipeId): builder.PrependInt64Slot(5, RecipeId, 0)
def CharacterGearExcelAddRecipeId(builder, RecipeId):
    """This method is deprecated. Please switch to AddRecipeId."""
    return AddRecipeId(builder, RecipeId)
def AddOpenFavorLevel(builder, OpenFavorLevel): builder.PrependInt64Slot(6, OpenFavorLevel, 0)
def CharacterGearExcelAddOpenFavorLevel(builder, OpenFavorLevel):
    """This method is deprecated. Please switch to AddOpenFavorLevel."""
    return AddOpenFavorLevel(builder, OpenFavorLevel)
def AddMaxLevel(builder, MaxLevel): builder.PrependInt64Slot(7, MaxLevel, 0)
def CharacterGearExcelAddMaxLevel(builder, MaxLevel):
    """This method is deprecated. Please switch to AddMaxLevel."""
    return AddMaxLevel(builder, MaxLevel)
def AddLearnSkillSlot(builder, LearnSkillSlot): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(LearnSkillSlot), 0)
def CharacterGearExcelAddLearnSkillSlot(builder, LearnSkillSlot):
    """This method is deprecated. Please switch to AddLearnSkillSlot."""
    return AddLearnSkillSlot(builder, LearnSkillSlot)
def AddStatType(builder, StatType): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(StatType), 0)
def CharacterGearExcelAddStatType(builder, StatType):
    """This method is deprecated. Please switch to AddStatType."""
    return AddStatType(builder, StatType)
def StartStatTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterGearExcelStartStatTypeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStatTypeVector(builder, numElems)
def AddMinStatValue(builder, MinStatValue): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(MinStatValue), 0)
def CharacterGearExcelAddMinStatValue(builder, MinStatValue):
    """This method is deprecated. Please switch to AddMinStatValue."""
    return AddMinStatValue(builder, MinStatValue)
def StartMinStatValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterGearExcelStartMinStatValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMinStatValueVector(builder, numElems)
def AddMaxStatValue(builder, MaxStatValue): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(MaxStatValue), 0)
def CharacterGearExcelAddMaxStatValue(builder, MaxStatValue):
    """This method is deprecated. Please switch to AddMaxStatValue."""
    return AddMaxStatValue(builder, MaxStatValue)
def StartMaxStatValueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def CharacterGearExcelStartMaxStatValueVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartMaxStatValueVector(builder, numElems)
def AddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def CharacterGearExcelAddIcon(builder, Icon):
    """This method is deprecated. Please switch to AddIcon."""
    return AddIcon(builder, Icon)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(13, LocalizeEtcId, 0)
def CharacterGearExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddTags(builder, Tags): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(Tags), 0)
def CharacterGearExcelAddTags(builder, Tags):
    """This method is deprecated. Please switch to AddTags."""
    return AddTags(builder, Tags)
def StartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CharacterGearExcelStartTagsVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartTagsVector(builder, numElems)
def End(builder): return builder.EndObject()
def CharacterGearExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
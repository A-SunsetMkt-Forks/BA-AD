# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OperatorExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OperatorExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperatorExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OperatorExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OperatorExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OperatorExcel
    def OperatorCondition_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def OutputSequence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def RandomWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def OutputDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def OperatorOutputPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # OperatorExcel
    def PortraitPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OperatorExcel
    def TextLocalizeKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # OperatorExcel
    def VoiceId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # OperatorExcel
    def VoiceIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # OperatorExcel
    def VoiceIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # OperatorExcel
    def VoiceIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # OperatorExcel
    def OperatorWaitQueue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(12)
def OperatorExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def OperatorExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddGroupId(builder, GroupId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(GroupId), 0)
def OperatorExcelAddGroupId(builder, GroupId):
    """This method is deprecated. Please switch to AddGroupId."""
    return AddGroupId(builder, GroupId)
def AddOperatorCondition_(builder, OperatorCondition_): builder.PrependInt32Slot(2, OperatorCondition_, 0)
def OperatorExcelAddOperatorCondition_(builder, OperatorCondition_):
    """This method is deprecated. Please switch to AddOperatorCondition_."""
    return AddOperatorCondition_(builder, OperatorCondition_)
def AddOutputSequence(builder, OutputSequence): builder.PrependInt32Slot(3, OutputSequence, 0)
def OperatorExcelAddOutputSequence(builder, OutputSequence):
    """This method is deprecated. Please switch to AddOutputSequence."""
    return AddOutputSequence(builder, OutputSequence)
def AddRandomWeight(builder, RandomWeight): builder.PrependInt32Slot(4, RandomWeight, 0)
def OperatorExcelAddRandomWeight(builder, RandomWeight):
    """This method is deprecated. Please switch to AddRandomWeight."""
    return AddRandomWeight(builder, RandomWeight)
def AddOutputDelay(builder, OutputDelay): builder.PrependInt32Slot(5, OutputDelay, 0)
def OperatorExcelAddOutputDelay(builder, OutputDelay):
    """This method is deprecated. Please switch to AddOutputDelay."""
    return AddOutputDelay(builder, OutputDelay)
def AddDuration(builder, Duration): builder.PrependInt32Slot(6, Duration, 0)
def OperatorExcelAddDuration(builder, Duration):
    """This method is deprecated. Please switch to AddDuration."""
    return AddDuration(builder, Duration)
def AddOperatorOutputPriority(builder, OperatorOutputPriority): builder.PrependInt32Slot(7, OperatorOutputPriority, 0)
def OperatorExcelAddOperatorOutputPriority(builder, OperatorOutputPriority):
    """This method is deprecated. Please switch to AddOperatorOutputPriority."""
    return AddOperatorOutputPriority(builder, OperatorOutputPriority)
def AddPortraitPath(builder, PortraitPath): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(PortraitPath), 0)
def OperatorExcelAddPortraitPath(builder, PortraitPath):
    """This method is deprecated. Please switch to AddPortraitPath."""
    return AddPortraitPath(builder, PortraitPath)
def AddTextLocalizeKey(builder, TextLocalizeKey): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(TextLocalizeKey), 0)
def OperatorExcelAddTextLocalizeKey(builder, TextLocalizeKey):
    """This method is deprecated. Please switch to AddTextLocalizeKey."""
    return AddTextLocalizeKey(builder, TextLocalizeKey)
def AddVoiceId(builder, VoiceId): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(VoiceId), 0)
def OperatorExcelAddVoiceId(builder, VoiceId):
    """This method is deprecated. Please switch to AddVoiceId."""
    return AddVoiceId(builder, VoiceId)
def StartVoiceIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def OperatorExcelStartVoiceIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartVoiceIdVector(builder, numElems)
def AddOperatorWaitQueue(builder, OperatorWaitQueue): builder.PrependBoolSlot(11, OperatorWaitQueue, 0)
def OperatorExcelAddOperatorWaitQueue(builder, OperatorWaitQueue):
    """This method is deprecated. Please switch to AddOperatorWaitQueue."""
    return AddOperatorWaitQueue(builder, OperatorWaitQueue)
def End(builder): return builder.EndObject()
def OperatorExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
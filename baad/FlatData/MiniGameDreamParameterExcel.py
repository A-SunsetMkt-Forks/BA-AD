# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameDreamParameterExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameDreamParameterExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameDreamParameterExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameDreamParameterExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameDreamParameterExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameDreamParameterExcel
    def ParameterBase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterBaseMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameDreamParameterExcel
    def ParameterMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(9)
def MiniGameDreamParameterExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def MiniGameDreamParameterExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(1, EventContentId, 0)
def MiniGameDreamParameterExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddParameterType(builder, ParameterType): builder.PrependInt32Slot(2, ParameterType, 0)
def MiniGameDreamParameterExcelAddParameterType(builder, ParameterType):
    """This method is deprecated. Please switch to AddParameterType."""
    return AddParameterType(builder, ParameterType)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(3, LocalizeEtcId, 0)
def MiniGameDreamParameterExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddIconPath(builder, IconPath): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(IconPath), 0)
def MiniGameDreamParameterExcelAddIconPath(builder, IconPath):
    """This method is deprecated. Please switch to AddIconPath."""
    return AddIconPath(builder, IconPath)
def AddParameterBase(builder, ParameterBase): builder.PrependInt64Slot(5, ParameterBase, 0)
def MiniGameDreamParameterExcelAddParameterBase(builder, ParameterBase):
    """This method is deprecated. Please switch to AddParameterBase."""
    return AddParameterBase(builder, ParameterBase)
def AddParameterBaseMax(builder, ParameterBaseMax): builder.PrependInt64Slot(6, ParameterBaseMax, 0)
def MiniGameDreamParameterExcelAddParameterBaseMax(builder, ParameterBaseMax):
    """This method is deprecated. Please switch to AddParameterBaseMax."""
    return AddParameterBaseMax(builder, ParameterBaseMax)
def AddParameterMin(builder, ParameterMin): builder.PrependInt64Slot(7, ParameterMin, 0)
def MiniGameDreamParameterExcelAddParameterMin(builder, ParameterMin):
    """This method is deprecated. Please switch to AddParameterMin."""
    return AddParameterMin(builder, ParameterMin)
def AddParameterMax(builder, ParameterMax): builder.PrependInt64Slot(8, ParameterMax, 0)
def MiniGameDreamParameterExcelAddParameterMax(builder, ParameterMax):
    """This method is deprecated. Please switch to AddParameterMax."""
    return AddParameterMax(builder, ParameterMax)
def End(builder): return builder.EndObject()
def MiniGameDreamParameterExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
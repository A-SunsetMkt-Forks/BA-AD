# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EmblemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EmblemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEmblemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EmblemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EmblemExcel
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def Rarity_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def LocalizeEtcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def LocalizeCodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def UseAtLocalizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemTextVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # EmblemExcel
    def IconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemIconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemIconNumControl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemIconBGPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBGPathJp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def EmblemBGPathKr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def DisplayStartDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DisplayEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EmblemExcel
    def DislpayFavorLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def CheckPassType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def EmblemParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EmblemExcel
    def CheckPassCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(21)
def EmblemExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddId(builder, Id): builder.PrependInt64Slot(0, Id, 0)
def EmblemExcelAddId(builder, Id):
    """This method is deprecated. Please switch to AddId."""
    return AddId(builder, Id)
def AddCategory(builder, Category): builder.PrependInt32Slot(1, Category, 0)
def EmblemExcelAddCategory(builder, Category):
    """This method is deprecated. Please switch to AddCategory."""
    return AddCategory(builder, Category)
def AddRarity_(builder, Rarity_): builder.PrependInt32Slot(2, Rarity_, 0)
def EmblemExcelAddRarity_(builder, Rarity_):
    """This method is deprecated. Please switch to AddRarity_."""
    return AddRarity_(builder, Rarity_)
def AddDisplayOrder(builder, DisplayOrder): builder.PrependInt64Slot(3, DisplayOrder, 0)
def EmblemExcelAddDisplayOrder(builder, DisplayOrder):
    """This method is deprecated. Please switch to AddDisplayOrder."""
    return AddDisplayOrder(builder, DisplayOrder)
def AddLocalizeEtcId(builder, LocalizeEtcId): builder.PrependUint32Slot(4, LocalizeEtcId, 0)
def EmblemExcelAddLocalizeEtcId(builder, LocalizeEtcId):
    """This method is deprecated. Please switch to AddLocalizeEtcId."""
    return AddLocalizeEtcId(builder, LocalizeEtcId)
def AddLocalizeCodeId(builder, LocalizeCodeId): builder.PrependUint32Slot(5, LocalizeCodeId, 0)
def EmblemExcelAddLocalizeCodeId(builder, LocalizeCodeId):
    """This method is deprecated. Please switch to AddLocalizeCodeId."""
    return AddLocalizeCodeId(builder, LocalizeCodeId)
def AddUseAtLocalizeId(builder, UseAtLocalizeId): builder.PrependInt64Slot(6, UseAtLocalizeId, 0)
def EmblemExcelAddUseAtLocalizeId(builder, UseAtLocalizeId):
    """This method is deprecated. Please switch to AddUseAtLocalizeId."""
    return AddUseAtLocalizeId(builder, UseAtLocalizeId)
def AddEmblemTextVisible(builder, EmblemTextVisible): builder.PrependBoolSlot(7, EmblemTextVisible, 0)
def EmblemExcelAddEmblemTextVisible(builder, EmblemTextVisible):
    """This method is deprecated. Please switch to AddEmblemTextVisible."""
    return AddEmblemTextVisible(builder, EmblemTextVisible)
def AddIconPath(builder, IconPath): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(IconPath), 0)
def EmblemExcelAddIconPath(builder, IconPath):
    """This method is deprecated. Please switch to AddIconPath."""
    return AddIconPath(builder, IconPath)
def AddEmblemIconPath(builder, EmblemIconPath): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(EmblemIconPath), 0)
def EmblemExcelAddEmblemIconPath(builder, EmblemIconPath):
    """This method is deprecated. Please switch to AddEmblemIconPath."""
    return AddEmblemIconPath(builder, EmblemIconPath)
def AddEmblemIconNumControl(builder, EmblemIconNumControl): builder.PrependInt32Slot(10, EmblemIconNumControl, 0)
def EmblemExcelAddEmblemIconNumControl(builder, EmblemIconNumControl):
    """This method is deprecated. Please switch to AddEmblemIconNumControl."""
    return AddEmblemIconNumControl(builder, EmblemIconNumControl)
def AddEmblemIconBGPath(builder, EmblemIconBGPath): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(EmblemIconBGPath), 0)
def EmblemExcelAddEmblemIconBGPath(builder, EmblemIconBGPath):
    """This method is deprecated. Please switch to AddEmblemIconBGPath."""
    return AddEmblemIconBGPath(builder, EmblemIconBGPath)
def AddEmblemBGPathJp(builder, EmblemBGPathJp): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(EmblemBGPathJp), 0)
def EmblemExcelAddEmblemBGPathJp(builder, EmblemBGPathJp):
    """This method is deprecated. Please switch to AddEmblemBGPathJp."""
    return AddEmblemBGPathJp(builder, EmblemBGPathJp)
def AddEmblemBGPathKr(builder, EmblemBGPathKr): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(EmblemBGPathKr), 0)
def EmblemExcelAddEmblemBGPathKr(builder, EmblemBGPathKr):
    """This method is deprecated. Please switch to AddEmblemBGPathKr."""
    return AddEmblemBGPathKr(builder, EmblemBGPathKr)
def AddDisplayType(builder, DisplayType): builder.PrependInt32Slot(14, DisplayType, 0)
def EmblemExcelAddDisplayType(builder, DisplayType):
    """This method is deprecated. Please switch to AddDisplayType."""
    return AddDisplayType(builder, DisplayType)
def AddDisplayStartDate(builder, DisplayStartDate): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(DisplayStartDate), 0)
def EmblemExcelAddDisplayStartDate(builder, DisplayStartDate):
    """This method is deprecated. Please switch to AddDisplayStartDate."""
    return AddDisplayStartDate(builder, DisplayStartDate)
def AddDisplayEndDate(builder, DisplayEndDate): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(DisplayEndDate), 0)
def EmblemExcelAddDisplayEndDate(builder, DisplayEndDate):
    """This method is deprecated. Please switch to AddDisplayEndDate."""
    return AddDisplayEndDate(builder, DisplayEndDate)
def AddDislpayFavorLevel(builder, DislpayFavorLevel): builder.PrependInt32Slot(17, DislpayFavorLevel, 0)
def EmblemExcelAddDislpayFavorLevel(builder, DislpayFavorLevel):
    """This method is deprecated. Please switch to AddDislpayFavorLevel."""
    return AddDislpayFavorLevel(builder, DislpayFavorLevel)
def AddCheckPassType(builder, CheckPassType): builder.PrependInt32Slot(18, CheckPassType, 0)
def EmblemExcelAddCheckPassType(builder, CheckPassType):
    """This method is deprecated. Please switch to AddCheckPassType."""
    return AddCheckPassType(builder, CheckPassType)
def AddEmblemParameter(builder, EmblemParameter): builder.PrependInt64Slot(19, EmblemParameter, 0)
def EmblemExcelAddEmblemParameter(builder, EmblemParameter):
    """This method is deprecated. Please switch to AddEmblemParameter."""
    return AddEmblemParameter(builder, EmblemParameter)
def AddCheckPassCount(builder, CheckPassCount): builder.PrependInt64Slot(20, CheckPassCount, 0)
def EmblemExcelAddCheckPassCount(builder, CheckPassCount):
    """This method is deprecated. Please switch to AddCheckPassCount."""
    return AddCheckPassCount(builder, CheckPassCount)
def End(builder): return builder.EndObject()
def EmblemExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MiniGameShootingGeasExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MiniGameShootingGeasExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMiniGameShootingGeasExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MiniGameShootingGeasExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MiniGameShootingGeasExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def GeasType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingGeasExcel
    def Probability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def MaxOverlapCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def GeasData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MiniGameShootingGeasExcel
    def NeedGeasId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MiniGameShootingGeasExcel
    def HideInPausePopup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(8)
def MiniGameShootingGeasExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def MiniGameShootingGeasExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddGeasType(builder, GeasType): builder.PrependInt32Slot(1, GeasType, 0)
def MiniGameShootingGeasExcelAddGeasType(builder, GeasType):
    """This method is deprecated. Please switch to AddGeasType."""
    return AddGeasType(builder, GeasType)
def AddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def MiniGameShootingGeasExcelAddIcon(builder, Icon):
    """This method is deprecated. Please switch to AddIcon."""
    return AddIcon(builder, Icon)
def AddProbability(builder, Probability): builder.PrependInt64Slot(3, Probability, 0)
def MiniGameShootingGeasExcelAddProbability(builder, Probability):
    """This method is deprecated. Please switch to AddProbability."""
    return AddProbability(builder, Probability)
def AddMaxOverlapCount(builder, MaxOverlapCount): builder.PrependInt32Slot(4, MaxOverlapCount, 0)
def MiniGameShootingGeasExcelAddMaxOverlapCount(builder, MaxOverlapCount):
    """This method is deprecated. Please switch to AddMaxOverlapCount."""
    return AddMaxOverlapCount(builder, MaxOverlapCount)
def AddGeasData(builder, GeasData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(GeasData), 0)
def MiniGameShootingGeasExcelAddGeasData(builder, GeasData):
    """This method is deprecated. Please switch to AddGeasData."""
    return AddGeasData(builder, GeasData)
def AddNeedGeasId(builder, NeedGeasId): builder.PrependInt64Slot(6, NeedGeasId, 0)
def MiniGameShootingGeasExcelAddNeedGeasId(builder, NeedGeasId):
    """This method is deprecated. Please switch to AddNeedGeasId."""
    return AddNeedGeasId(builder, NeedGeasId)
def AddHideInPausePopup(builder, HideInPausePopup): builder.PrependBoolSlot(7, HideInPausePopup, 0)
def MiniGameShootingGeasExcelAddHideInPausePopup(builder, HideInPausePopup):
    """This method is deprecated. Please switch to AddHideInPausePopup."""
    return AddHideInPausePopup(builder, HideInPausePopup)
def End(builder): return builder.EndObject()
def MiniGameShootingGeasExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
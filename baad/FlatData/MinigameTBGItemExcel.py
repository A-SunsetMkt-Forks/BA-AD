# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MinigameTBGItemExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MinigameTBGItemExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMinigameTBGItemExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MinigameTBGItemExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MinigameTBGItemExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def TBGItemEffectType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def ItemParameter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def LocalizeETCId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def BuffIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def EncounterCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MinigameTBGItemExcel
    def DiceEffectAniClip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MinigameTBGItemExcel
    def BuffIconHUDVisible(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def Start(builder): builder.StartObject(10)
def MinigameTBGItemExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def MinigameTBGItemExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddItemType(builder, ItemType): builder.PrependInt32Slot(1, ItemType, 0)
def MinigameTBGItemExcelAddItemType(builder, ItemType):
    """This method is deprecated. Please switch to AddItemType."""
    return AddItemType(builder, ItemType)
def AddTBGItemEffectType_(builder, TBGItemEffectType_): builder.PrependInt32Slot(2, TBGItemEffectType_, 0)
def MinigameTBGItemExcelAddTBGItemEffectType_(builder, TBGItemEffectType_):
    """This method is deprecated. Please switch to AddTBGItemEffectType_."""
    return AddTBGItemEffectType_(builder, TBGItemEffectType_)
def AddItemParameter(builder, ItemParameter): builder.PrependInt32Slot(3, ItemParameter, 0)
def MinigameTBGItemExcelAddItemParameter(builder, ItemParameter):
    """This method is deprecated. Please switch to AddItemParameter."""
    return AddItemParameter(builder, ItemParameter)
def AddLocalizeETCId(builder, LocalizeETCId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(LocalizeETCId), 0)
def MinigameTBGItemExcelAddLocalizeETCId(builder, LocalizeETCId):
    """This method is deprecated. Please switch to AddLocalizeETCId."""
    return AddLocalizeETCId(builder, LocalizeETCId)
def AddIcon(builder, Icon): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(Icon), 0)
def MinigameTBGItemExcelAddIcon(builder, Icon):
    """This method is deprecated. Please switch to AddIcon."""
    return AddIcon(builder, Icon)
def AddBuffIcon(builder, BuffIcon): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(BuffIcon), 0)
def MinigameTBGItemExcelAddBuffIcon(builder, BuffIcon):
    """This method is deprecated. Please switch to AddBuffIcon."""
    return AddBuffIcon(builder, BuffIcon)
def AddEncounterCount(builder, EncounterCount): builder.PrependInt32Slot(7, EncounterCount, 0)
def MinigameTBGItemExcelAddEncounterCount(builder, EncounterCount):
    """This method is deprecated. Please switch to AddEncounterCount."""
    return AddEncounterCount(builder, EncounterCount)
def AddDiceEffectAniClip(builder, DiceEffectAniClip): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(DiceEffectAniClip), 0)
def MinigameTBGItemExcelAddDiceEffectAniClip(builder, DiceEffectAniClip):
    """This method is deprecated. Please switch to AddDiceEffectAniClip."""
    return AddDiceEffectAniClip(builder, DiceEffectAniClip)
def AddBuffIconHUDVisible(builder, BuffIconHUDVisible): builder.PrependBoolSlot(9, BuffIconHUDVisible, 0)
def MinigameTBGItemExcelAddBuffIconHUDVisible(builder, BuffIconHUDVisible):
    """This method is deprecated. Please switch to AddBuffIconHUDVisible."""
    return AddBuffIconHUDVisible(builder, BuffIconHUDVisible)
def End(builder): return builder.EndObject()
def MinigameTBGItemExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
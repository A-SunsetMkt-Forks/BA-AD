# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ContentsShortcutExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContentsShortcutExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsContentsShortcutExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ContentsShortcutExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContentsShortcutExcel
    def UniqueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ContentType_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def EventContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ScenarioModeVolume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ScenarioModeChapter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutOpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContentsShortcutExcel
    def ShortcutCloseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ContentsShortcutExcel
    def ConditionContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ConquestMapDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ConquestStepIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ContentsShortcutExcel
    def ShortcutUIName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ContentsShortcutExcel
    def ShortcutUINameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContentsShortcutExcel
    def ShortcutUINameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # ContentsShortcutExcel
    def Localize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(13)
def ContentsShortcutExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddUniqueId(builder, UniqueId): builder.PrependInt64Slot(0, UniqueId, 0)
def ContentsShortcutExcelAddUniqueId(builder, UniqueId):
    """This method is deprecated. Please switch to AddUniqueId."""
    return AddUniqueId(builder, UniqueId)
def AddContentType_(builder, ContentType_): builder.PrependInt32Slot(1, ContentType_, 0)
def ContentsShortcutExcelAddContentType_(builder, ContentType_):
    """This method is deprecated. Please switch to AddContentType_."""
    return AddContentType_(builder, ContentType_)
def AddEventContentId(builder, EventContentId): builder.PrependInt64Slot(2, EventContentId, 0)
def ContentsShortcutExcelAddEventContentId(builder, EventContentId):
    """This method is deprecated. Please switch to AddEventContentId."""
    return AddEventContentId(builder, EventContentId)
def AddScenarioModeVolume(builder, ScenarioModeVolume): builder.PrependInt64Slot(3, ScenarioModeVolume, 0)
def ContentsShortcutExcelAddScenarioModeVolume(builder, ScenarioModeVolume):
    """This method is deprecated. Please switch to AddScenarioModeVolume."""
    return AddScenarioModeVolume(builder, ScenarioModeVolume)
def AddScenarioModeChapter(builder, ScenarioModeChapter): builder.PrependInt64Slot(4, ScenarioModeChapter, 0)
def ContentsShortcutExcelAddScenarioModeChapter(builder, ScenarioModeChapter):
    """This method is deprecated. Please switch to AddScenarioModeChapter."""
    return AddScenarioModeChapter(builder, ScenarioModeChapter)
def AddShortcutOpenTime(builder, ShortcutOpenTime): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutOpenTime), 0)
def ContentsShortcutExcelAddShortcutOpenTime(builder, ShortcutOpenTime):
    """This method is deprecated. Please switch to AddShortcutOpenTime."""
    return AddShortcutOpenTime(builder, ShortcutOpenTime)
def AddShortcutCloseTime(builder, ShortcutCloseTime): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutCloseTime), 0)
def ContentsShortcutExcelAddShortcutCloseTime(builder, ShortcutCloseTime):
    """This method is deprecated. Please switch to AddShortcutCloseTime."""
    return AddShortcutCloseTime(builder, ShortcutCloseTime)
def AddConditionContentId(builder, ConditionContentId): builder.PrependInt64Slot(7, ConditionContentId, 0)
def ContentsShortcutExcelAddConditionContentId(builder, ConditionContentId):
    """This method is deprecated. Please switch to AddConditionContentId."""
    return AddConditionContentId(builder, ConditionContentId)
def AddConquestMapDifficulty(builder, ConquestMapDifficulty): builder.PrependInt32Slot(8, ConquestMapDifficulty, 0)
def ContentsShortcutExcelAddConquestMapDifficulty(builder, ConquestMapDifficulty):
    """This method is deprecated. Please switch to AddConquestMapDifficulty."""
    return AddConquestMapDifficulty(builder, ConquestMapDifficulty)
def AddConquestStepIndex(builder, ConquestStepIndex): builder.PrependInt32Slot(9, ConquestStepIndex, 0)
def ContentsShortcutExcelAddConquestStepIndex(builder, ConquestStepIndex):
    """This method is deprecated. Please switch to AddConquestStepIndex."""
    return AddConquestStepIndex(builder, ConquestStepIndex)
def AddShortcutContentId(builder, ShortcutContentId): builder.PrependInt64Slot(10, ShortcutContentId, 0)
def ContentsShortcutExcelAddShortcutContentId(builder, ShortcutContentId):
    """This method is deprecated. Please switch to AddShortcutContentId."""
    return AddShortcutContentId(builder, ShortcutContentId)
def AddShortcutUIName(builder, ShortcutUIName): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ShortcutUIName), 0)
def ContentsShortcutExcelAddShortcutUIName(builder, ShortcutUIName):
    """This method is deprecated. Please switch to AddShortcutUIName."""
    return AddShortcutUIName(builder, ShortcutUIName)
def StartShortcutUINameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ContentsShortcutExcelStartShortcutUINameVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartShortcutUINameVector(builder, numElems)
def AddLocalize(builder, Localize): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(Localize), 0)
def ContentsShortcutExcelAddLocalize(builder, Localize):
    """This method is deprecated. Please switch to AddLocalize."""
    return AddLocalize(builder, Localize)
def End(builder): return builder.EndObject()
def ContentsShortcutExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
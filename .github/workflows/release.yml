name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: target/release/baad
            asset_name: baad-linux-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: target/release/baad.exe
            asset_name: baad-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: target/release/baad
            asset_name: baad-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: target/release/baad
            asset_name: baad-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --features "logs,debug" --release --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.artifact_name }}

  deploy:
    name: Deploy to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release assets
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip "../${dir%/}.zip" *
            else
              tar -czf "../${dir%/}.tar.gz" *
            fi
            cd ..
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/*.{zip,tar.gz}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
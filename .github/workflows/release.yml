name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name: baad-linux-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name: baad-windows-x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name: baad-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name: baad-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --features "logs,debug" --release --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/baad${{ runner.os == 'Windows' && '.exe' || '' }}

  deploy:
    name: Deploy to Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      actions: read

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          run-id: ${{ github.run_id }}

      - name: Create release assets
        run: |
          # This check ensures that the script doesn't fail if no artifacts were downloaded.
          if [ ! -d "artifacts" ] || [ -z "$(ls -A artifacts)" ]; then
            echo "::error::No artifacts were found to package. Aborting."
            exit 1
          fi
          
          cd artifacts
          # This loop iterates over each downloaded artifact directory.
          for dir in */; do
            # This check ensures we are only processing directories.
            if [ -d "$dir" ]; then
              # This removes the trailing slash from the directory name.
              local_dir_name=${dir%/}
              cd "$dir"
              # This checks if the artifact is for Windows and creates a .zip file.
              if [[ "$local_dir_name" == *"windows"* ]]; then
                zip "../${local_dir_name}.zip" ./*
              # Otherwise, it creates a .tar.gz file for Linux and macOS.
              else
                tar -czf "../${local_dir_name}.tar.gz" ./*
              fi
              cd ..
            fi
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: artifacts/*.{zip,tar.gz}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FlatData

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EliminateRaidSeasonManageExcel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EliminateRaidSeasonManageExcel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEliminateRaidSeasonManageExcel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # EliminateRaidSeasonManageExcel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EliminateRaidSeasonManageExcel
    def SeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def SeasonDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def SeasonStartData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def SeasonEndData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def SettlementEndDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def LobbyTableBGPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def LobbyScreenBGPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def OpenRaidBossGroup01(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def OpenRaidBossGroup02(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def OpenRaidBossGroup03(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # EliminateRaidSeasonManageExcel
    def RankingRewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def MaxSeasonRewardGauage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def StackedSeasonRewardGauge(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EliminateRaidSeasonManageExcel
    def StackedSeasonRewardGaugeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EliminateRaidSeasonManageExcel
    def StackedSeasonRewardGaugeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidSeasonManageExcel
    def StackedSeasonRewardGaugeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # EliminateRaidSeasonManageExcel
    def SeasonRewardId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # EliminateRaidSeasonManageExcel
    def SeasonRewardIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # EliminateRaidSeasonManageExcel
    def SeasonRewardIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EliminateRaidSeasonManageExcel
    def SeasonRewardIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdNormal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdHard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdVeryhard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdHardcore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdExtreme(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdInsane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # EliminateRaidSeasonManageExcel
    def LimitedRewardIdTorment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def Start(builder): builder.StartObject(21)
def EliminateRaidSeasonManageExcelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddSeasonId(builder, SeasonId): builder.PrependInt64Slot(0, SeasonId, 0)
def EliminateRaidSeasonManageExcelAddSeasonId(builder, SeasonId):
    """This method is deprecated. Please switch to AddSeasonId."""
    return AddSeasonId(builder, SeasonId)
def AddSeasonDisplay(builder, SeasonDisplay): builder.PrependInt64Slot(1, SeasonDisplay, 0)
def EliminateRaidSeasonManageExcelAddSeasonDisplay(builder, SeasonDisplay):
    """This method is deprecated. Please switch to AddSeasonDisplay."""
    return AddSeasonDisplay(builder, SeasonDisplay)
def AddSeasonStartData(builder, SeasonStartData): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(SeasonStartData), 0)
def EliminateRaidSeasonManageExcelAddSeasonStartData(builder, SeasonStartData):
    """This method is deprecated. Please switch to AddSeasonStartData."""
    return AddSeasonStartData(builder, SeasonStartData)
def AddSeasonEndData(builder, SeasonEndData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(SeasonEndData), 0)
def EliminateRaidSeasonManageExcelAddSeasonEndData(builder, SeasonEndData):
    """This method is deprecated. Please switch to AddSeasonEndData."""
    return AddSeasonEndData(builder, SeasonEndData)
def AddSettlementEndDate(builder, SettlementEndDate): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(SettlementEndDate), 0)
def EliminateRaidSeasonManageExcelAddSettlementEndDate(builder, SettlementEndDate):
    """This method is deprecated. Please switch to AddSettlementEndDate."""
    return AddSettlementEndDate(builder, SettlementEndDate)
def AddLobbyTableBGPath(builder, LobbyTableBGPath): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(LobbyTableBGPath), 0)
def EliminateRaidSeasonManageExcelAddLobbyTableBGPath(builder, LobbyTableBGPath):
    """This method is deprecated. Please switch to AddLobbyTableBGPath."""
    return AddLobbyTableBGPath(builder, LobbyTableBGPath)
def AddLobbyScreenBGPath(builder, LobbyScreenBGPath): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(LobbyScreenBGPath), 0)
def EliminateRaidSeasonManageExcelAddLobbyScreenBGPath(builder, LobbyScreenBGPath):
    """This method is deprecated. Please switch to AddLobbyScreenBGPath."""
    return AddLobbyScreenBGPath(builder, LobbyScreenBGPath)
def AddOpenRaidBossGroup01(builder, OpenRaidBossGroup01): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(OpenRaidBossGroup01), 0)
def EliminateRaidSeasonManageExcelAddOpenRaidBossGroup01(builder, OpenRaidBossGroup01):
    """This method is deprecated. Please switch to AddOpenRaidBossGroup01."""
    return AddOpenRaidBossGroup01(builder, OpenRaidBossGroup01)
def AddOpenRaidBossGroup02(builder, OpenRaidBossGroup02): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(OpenRaidBossGroup02), 0)
def EliminateRaidSeasonManageExcelAddOpenRaidBossGroup02(builder, OpenRaidBossGroup02):
    """This method is deprecated. Please switch to AddOpenRaidBossGroup02."""
    return AddOpenRaidBossGroup02(builder, OpenRaidBossGroup02)
def AddOpenRaidBossGroup03(builder, OpenRaidBossGroup03): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(OpenRaidBossGroup03), 0)
def EliminateRaidSeasonManageExcelAddOpenRaidBossGroup03(builder, OpenRaidBossGroup03):
    """This method is deprecated. Please switch to AddOpenRaidBossGroup03."""
    return AddOpenRaidBossGroup03(builder, OpenRaidBossGroup03)
def AddRankingRewardGroupId(builder, RankingRewardGroupId): builder.PrependInt64Slot(10, RankingRewardGroupId, 0)
def EliminateRaidSeasonManageExcelAddRankingRewardGroupId(builder, RankingRewardGroupId):
    """This method is deprecated. Please switch to AddRankingRewardGroupId."""
    return AddRankingRewardGroupId(builder, RankingRewardGroupId)
def AddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage): builder.PrependInt32Slot(11, MaxSeasonRewardGauage, 0)
def EliminateRaidSeasonManageExcelAddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage):
    """This method is deprecated. Please switch to AddMaxSeasonRewardGauage."""
    return AddMaxSeasonRewardGauage(builder, MaxSeasonRewardGauage)
def AddStackedSeasonRewardGauge(builder, StackedSeasonRewardGauge): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(StackedSeasonRewardGauge), 0)
def EliminateRaidSeasonManageExcelAddStackedSeasonRewardGauge(builder, StackedSeasonRewardGauge):
    """This method is deprecated. Please switch to AddStackedSeasonRewardGauge."""
    return AddStackedSeasonRewardGauge(builder, StackedSeasonRewardGauge)
def StartStackedSeasonRewardGaugeVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EliminateRaidSeasonManageExcelStartStackedSeasonRewardGaugeVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartStackedSeasonRewardGaugeVector(builder, numElems)
def AddSeasonRewardId(builder, SeasonRewardId): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(SeasonRewardId), 0)
def EliminateRaidSeasonManageExcelAddSeasonRewardId(builder, SeasonRewardId):
    """This method is deprecated. Please switch to AddSeasonRewardId."""
    return AddSeasonRewardId(builder, SeasonRewardId)
def StartSeasonRewardIdVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def EliminateRaidSeasonManageExcelStartSeasonRewardIdVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSeasonRewardIdVector(builder, numElems)
def AddLimitedRewardIdNormal(builder, LimitedRewardIdNormal): builder.PrependInt64Slot(14, LimitedRewardIdNormal, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdNormal(builder, LimitedRewardIdNormal):
    """This method is deprecated. Please switch to AddLimitedRewardIdNormal."""
    return AddLimitedRewardIdNormal(builder, LimitedRewardIdNormal)
def AddLimitedRewardIdHard(builder, LimitedRewardIdHard): builder.PrependInt64Slot(15, LimitedRewardIdHard, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdHard(builder, LimitedRewardIdHard):
    """This method is deprecated. Please switch to AddLimitedRewardIdHard."""
    return AddLimitedRewardIdHard(builder, LimitedRewardIdHard)
def AddLimitedRewardIdVeryhard(builder, LimitedRewardIdVeryhard): builder.PrependInt64Slot(16, LimitedRewardIdVeryhard, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdVeryhard(builder, LimitedRewardIdVeryhard):
    """This method is deprecated. Please switch to AddLimitedRewardIdVeryhard."""
    return AddLimitedRewardIdVeryhard(builder, LimitedRewardIdVeryhard)
def AddLimitedRewardIdHardcore(builder, LimitedRewardIdHardcore): builder.PrependInt64Slot(17, LimitedRewardIdHardcore, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdHardcore(builder, LimitedRewardIdHardcore):
    """This method is deprecated. Please switch to AddLimitedRewardIdHardcore."""
    return AddLimitedRewardIdHardcore(builder, LimitedRewardIdHardcore)
def AddLimitedRewardIdExtreme(builder, LimitedRewardIdExtreme): builder.PrependInt64Slot(18, LimitedRewardIdExtreme, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdExtreme(builder, LimitedRewardIdExtreme):
    """This method is deprecated. Please switch to AddLimitedRewardIdExtreme."""
    return AddLimitedRewardIdExtreme(builder, LimitedRewardIdExtreme)
def AddLimitedRewardIdInsane(builder, LimitedRewardIdInsane): builder.PrependInt64Slot(19, LimitedRewardIdInsane, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdInsane(builder, LimitedRewardIdInsane):
    """This method is deprecated. Please switch to AddLimitedRewardIdInsane."""
    return AddLimitedRewardIdInsane(builder, LimitedRewardIdInsane)
def AddLimitedRewardIdTorment(builder, LimitedRewardIdTorment): builder.PrependInt64Slot(20, LimitedRewardIdTorment, 0)
def EliminateRaidSeasonManageExcelAddLimitedRewardIdTorment(builder, LimitedRewardIdTorment):
    """This method is deprecated. Please switch to AddLimitedRewardIdTorment."""
    return AddLimitedRewardIdTorment(builder, LimitedRewardIdTorment)
def End(builder): return builder.EndObject()
def EliminateRaidSeasonManageExcelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)